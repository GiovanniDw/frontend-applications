{"version":3,"sources":["GlobalStyle.js","components/SVGContainer.jsx","components/ZoomContainer.jsx","components/DrawMap.jsx","App.jsx","data/useNLD.jsx","data/usePenR.jsx","data/useWorld.jsx","reportWebVitals.js","index.jsx"],"names":["colors","GlobalStyle","createGlobalStyle","normalize","Context","createContext","SVGContainer","children","width","height","svgRef","useRef","useState","svg","setSvg","useEffect","current","ref","Provider","value","ZoomContainer","props","activeProvince","svgElement","useContext","x","y","k","setTransform","zoomed","event","transform","select","selection","zoomMap","zoom","scaleExtent","on","call","projection","geoMercator","scale","center","path","geoPath","Province","d","isActive","onClick","className","Circle","styled","circle","DrawMap","nld","gemeente","province","provinceBorder","allPenR","penr","console","log","provinces","features","setActiveProvince","id","map","data","longitude","latitude","cx","cy","r","App","setData","json","then","topology","objects","gemeente_2020","provincie_2020","feature","mesh","a","b","useNLD","csv","byProvince","group","byCity","city","usePenR","wrld","countries","land","useWrld","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uaAGO,IAAMA,EACF,UADEA,EAEN,UAFMA,EASL,UAqBOC,EATKC,4BAAH,IACXC,YAEgBH,G,qBCzBhBI,EAAUC,wBAAc,MAEjBC,EAAe,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OACzCC,EAASC,iBAAO,MADsC,EAEtCC,mBAAS,MAF6B,mBAErDC,EAFqD,KAEhDC,EAFgD,KAI5D,OADAC,qBAAU,kBAAMD,EAAOJ,EAAOM,WAAU,IAEvC,qBACCC,IAAKP,EACLF,MAAOA,EACPC,OAAQA,EAHT,SAKC,cAACL,EAAQc,SAAT,CAAkBC,MAAON,EAAzB,SAA+BN,OCV3B,IAAMa,EAAgB,SAACC,GAAW,IAChCd,EAA6Bc,EAA7Bd,SAAUe,EAAmBD,EAAnBC,eAEZC,EDYCC,qBAAWpB,GCfqB,EAIHQ,mBAAS,CAAEa,EAAG,EAAGC,EAAG,EAAGC,EAAG,IAJvB,0BAI9BF,EAJ8B,EAI9BA,EAAGC,EAJ2B,EAI3BA,EAAGC,EAJwB,EAIxBA,EAAKC,EAJmB,KAMjCC,EAAS,SAACC,GACfF,EAAaE,EAAMC,YAOpB,GAAIT,EACqBU,YAAOV,GAahC,OATAP,qBAAU,WACT,GAAKQ,EAAL,CACA,IAAMU,EAAYD,YAAOT,GACnBW,EAAUC,cAAOC,YAAY,CAAC,EAAG,IAAIC,GAAG,OAAQR,GAGtD,OADAI,EAAUK,KAAKJ,GACR,kBAAMD,EAAUI,GAAG,QAAS,UACjC,CAACd,IAEG,mBAAGQ,UAAS,oBAAeN,EAAf,aAAqBC,EAArB,mBAAiCC,EAAjC,KAAZ,SAAoDpB,K,6ICzB5D,IAAMgC,EAAaC,cAAcC,MAAM,KAAMC,OAAO,CAAC,KAAM,OACrDC,EAAOC,YAAQL,GAiDfM,EAAW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,EAAGC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAChC,OACC,sBACCC,UAAWF,EAAW,kBAAoB,WAC1CD,EAAGA,EACHE,QAASA,KAKNE,EAASC,UAAOC,OAAV,IACHpD,EAICA,GAIKqD,EAlEQ,SAAChC,GAAW,IAAD,EACcA,EAAMiC,IAA7CC,EADyB,EACzBA,SAAUC,EADe,EACfA,SAAUC,EADK,EACLA,eACpBC,EAAYrC,EAAMsC,KAAlBD,QAERE,QAAQC,IAAIH,GAEZ,IAAMI,EAAYN,EAASO,SANM,EAUWnD,mBAAS,MAVpB,mBAU1BU,EAV0B,KAUV0C,EAVU,KAajC,OACC,cAAC,EAAD,CAAe1C,eAAgBA,EAA/B,SACC,oBAAG2B,UAAU,MAAb,UACC,mBAAGgB,GAAG,YAAN,SACEV,EAASQ,SAASG,KAAI,SAACpB,GAAD,OACtB,sBAECG,UAAU,iBACVH,EAAGH,EAAKG,IAFHA,EAAEmB,SAMV,mBAAGA,GAAG,YAAN,SACEH,EAAUI,KAAI,SAACpB,GAAD,OACd,cAAC,EAAD,CACCqB,KAAMrB,EAENA,EAAGH,EAAKG,GACRC,SAAUzB,IAAmBwB,EAC7BE,QAAS,kBAAMgB,EAAkBlB,KAH5BA,EAAEmB,SAQV,sBAAMA,GAAG,mBAAmBnB,EAAGH,EAAKc,KACnCC,EAAQQ,KAAI,SAACpB,GAAO,IAAD,EACJP,EAAW,CAACO,EAAEsB,UAAWtB,EAAEuB,WADvB,mBACZ5C,EADY,KACTC,EADS,KAEnB,OAAO,cAACwB,EAAD,CAAmBoB,GAAI7C,EAAG8C,GAAI7C,EAAG8C,EAAG,GAAvB1B,EAAEmB,aCpBZQ,EAnBH,WACX,IAAMnB,ECJe,WAAO,IAAD,EACH1C,mBAAS,MADN,mBACpBuD,EADoB,KACdO,EADc,KAY3B,OAVA3D,qBAAU,WACT4D,YANM,4IAMQC,MAAK,SAAAC,GAAa,IAAD,EACYA,EAASC,QAA3CC,EADsB,EACtBA,cAAeC,EADO,EACPA,eACvBN,EAAQ,CACPnB,SAAU0B,YAAQJ,EAAUE,GAC5BvB,SAAUyB,YAAQJ,EAAUG,GAC5BvB,eAAgByB,YAAKL,EAAUG,GAAgB,SAACG,EAAGC,GAAJ,OAAUD,IAAMC,YAG/D,IACIjB,EDRKkB,GACN1B,EEAgB,WAAO,IAAD,EACJ/C,mBAAS,MADL,mBACrBuD,EADqB,KACfO,EADe,KAa5B,OAXA3D,qBAAU,WACTuE,YAZD,mJAYcV,MAAK,SAACT,GAClB,IAXUrB,EAWJyC,EAAaC,YAAMrB,GAAM,SAACrB,GAAD,OAAOA,EAAEU,YAClCiC,EAASD,YAAMrB,GAAM,SAACrB,GAAD,OAAOA,EAAE4C,QACpChB,EAAQ,CACPa,WAAYA,EACZE,OAAQA,EACR/B,SAhBSZ,EAgBIqB,EAfhBrB,EAAEU,UAAYV,EAAEU,SAChBV,EAAEuB,UAAYvB,EAAEuB,SAChBvB,EAAEsB,WAAatB,EAAEsB,UACVtB,UAeJ,IACIqB,EFbMwB,GACPC,EGPgB,WAAO,IAAD,EACJhF,mBAAS,MADL,mBACrBuD,EADqB,KACfO,EADe,KAW5B,OATA3D,qBAAU,WACT4D,YANe,0DAMAC,MAAK,SAAAC,GAAa,IAAD,EACHA,EAASC,QAA7Be,EADuB,EACvBA,UAAWC,EADY,EACZA,KACnBpB,EAAQ,CACPoB,KAAMb,YAAQJ,EAAUiB,GACxBD,UAAWX,YAAKL,EAAUgB,GAAW,SAACV,EAAGC,GAAJ,OAAUD,IAAMC,YAGrD,IACIjB,EHJM4B,GAEb,OAAKzC,GAAQK,GAASiC,EAIrB,sBAAK3C,UAAU,MAAf,UACC,cAAC,EAAD,CAAczC,MAAM,OAAOC,OAAO,OAAlC,SACC,cAAC,EAAD,CAAS6C,IAAKA,EAAKK,KAAMA,EAAMiC,KAAMA,MAGtC,cAAC,EAAD,OARM,8CIHMI,EAdS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,8BAAqBtB,MACpB,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAClCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFZO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBZ,M","file":"static/js/main.290e7830.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nexport const colors = {\n\tdarkBlue: '#2F80ED',\n\tblue: '#2D9CDB',\n\tlightBlue: '#B3E5FC',\n\tdark: '#333333',\n\tdarkGray: '#4F4F4F',\n\tmidGray: '#828282',\n\tlightGray: '#BDBDBD',\n\tlight: '#E0E0E0',\n\twhite: '#F2F2F2',\n\tdarkGreen: '#219653',\n\tgreen: '#27AE60',\n\tlightGreen: '#6FCF97',\n\torange: '#F2994A',\n\tdarkPurple: '#9B51E0',\n\tpurple: '#BB6BD9',\n\tred: '#EB5757',\n\tyellow: '#F2C94C',\n};\n\n\nconst GlobalStyle = createGlobalStyle`\n    ${normalize};\n.App {\n  background-color: ${colors.white};\n  width: 100%;\n  height: 100%;\n}\n    `;\n\nexport default GlobalStyle;","import React, {useEffect, useRef, useState, createContext, useContext} from 'react';\n\nconst Context = createContext(null);\n\nexport const SVGContainer = ({ children, width, height }) => {\n\tconst svgRef = useRef(null);\n\tconst [svg, setSvg] = useState(null);\n\tuseEffect(() => setSvg(svgRef.current), []);\n\treturn (\n\t\t<svg\n\t\t\tref={svgRef}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t>\n\t\t\t<Context.Provider value={svg}>{children}</Context.Provider>\n\t\t</svg>\n\t);};\n\nexport function useSvg() {\n\treturn useContext(Context);\n}\n","import { select, zoom, geoBounds } from 'd3';\nimport React, { useState, useEffect } from 'react';\nimport { useSvg } from './SVGContainer';\n\nexport const ZoomContainer = (props) => {\n\tconst { children, activeProvince } = props;\n\n\tconst svgElement = useSvg();\n\tconst [{ x, y, k }, setTransform] = useState({ x: 0, y: 0, k: 1 });\n\n\tconst zoomed = (event) => {\n\t\tsetTransform(event.transform);\n\t};\n\n\t// const zoomToContainer = (event) => {\n\t// \t// const [[x0, y0], [x1, y1]] = path.bounds(d);\n\t// \tevent.stopPropagation();\n\t// };\n\tif (activeProvince) {\n\t\tconst currentProvince = select(activeProvince);\n\t\t// console.log(currentProvince.node());\n\t}\n\n\tuseEffect(() => {\n\t\tif (!svgElement) return;\n\t\tconst selection = select(svgElement);\n\t\tconst zoomMap = zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n\n\t\tselection.call(zoomMap);\n\t\treturn () => selection.on('.zoom', null);\n\t}, [svgElement]);\n\n\treturn <g transform={`translate(${x}, ${y}) scale(${k})`}>{children}</g>;\n};\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { ZoomContainer } from './ZoomContainer';\nimport { colors } from '../GlobalStyle';\n\nimport { geoMercator, geoPath } from 'd3';\n\nconst projection = geoMercator().scale(6000).center([5.55, 52.2]);\nconst path = geoPath(projection);\n\nexport const DrawMap = (props) => {\n\tconst { gemeente, province, provinceBorder } = props.nld;\n\tconst { allPenR } = props.penr;\n\n\tconsole.log(allPenR);\n\n\tconst provinces = province.features;\n\n\t// const provinceEl = useRef(null);\n\n\tconst [activeProvince, setActiveProvince] = useState(null);\n\t// useEffect(() => props.svg(activeProvince), []);\n\n\treturn (\n\t\t<ZoomContainer activeProvince={activeProvince}>\n\t\t\t<g className='nld'>\n\t\t\t\t<g id='gemeentes'>\n\t\t\t\t\t{gemeente.features.map((d) => (\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\t\tclassName='gemeente-grens'\n\t\t\t\t\t\t\td={path(d)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</g>\n\t\t\t\t<g id='provinces'>\n\t\t\t\t\t{provinces.map((d) => (\n\t\t\t\t\t\t<Province\n\t\t\t\t\t\t\tdata={d}\n\t\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\t\td={path(d)}\n\t\t\t\t\t\t\tisActive={activeProvince === d}\n\t\t\t\t\t\t\tonClick={() => setActiveProvince(d)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</g>\n\n\t\t\t\t<path id='province-borders' d={path(provinceBorder)} />\n\t\t\t\t{allPenR.map((d) => {\n\t\t\t\t\tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t\t\t\treturn <Circle key={d.id} cx={x} cy={y} r={1} />;\n\t\t\t\t})}\n\t\t\t</g>\n\t\t</ZoomContainer>\n\t);\n};\n\nconst Province = ({ d, isActive, onClick }) => {\n\treturn (\n\t\t<path\n\t\t\tclassName={isActive ? 'province active' : 'province'}\n\t\t\td={d}\n\t\t\tonClick={onClick}\n\t\t/>\n\t);\n};\n\nconst Circle = styled.circle`\n\tfill: ${colors.blue};\n\tfill-opacity: 1;\n\n\t&:hover {\n\t\tfill: ${colors.darkBlue};\n\t}\n`;\n\nexport default DrawMap;\n","import React from 'react';\n\nimport './App.css';\nimport GlobalStyle from './GlobalStyle';\nimport { useNLD } from './data/useNLD';\nimport { usePenR } from './data/usePenR';\nimport { useWrld } from './data/useWorld';\n\nimport { SVGContainer } from './components/SVGContainer';\nimport DrawMap from './components/DrawMap';\n\nconst App = () => {\n\tconst nld = useNLD();\n\tconst penr = usePenR();\n\tconst wrld = useWrld();\n\n\tif (!nld || !penr || !wrld) {\n\t\treturn <pre>Loading...</pre>;\n\t}\n\treturn (\n\t\t<div className='App'>\n\t\t\t<SVGContainer width='100%' height='100%'>\n\t\t\t\t<DrawMap nld={nld} penr={penr} wrld={wrld} />\n\t\t\t</SVGContainer>\n\t\t\t{/* <MapNL/> */}\n\t\t\t<GlobalStyle />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonNLD =\n        'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/nl_2020.json';\n        \n\nexport const useNLD = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonNLD).then(topology => {\n\t\t\tconst { gemeente_2020, provincie_2020 } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tgemeente: feature(topology, gemeente_2020),\n\t\t\t\tprovince: feature(topology, provincie_2020),\n\t\t\t\tprovinceBorder: mesh(topology, provincie_2020, (a, b) => a !== b)\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};","import { useState, useEffect } from 'react';\nimport { csv, group } from 'd3';\n\nconst csvPenR =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/OpenParkingPenR.csv';\n\nconst row = (d) => {\n\td.province = +d.province;\n\td.latitude = +d.latitude;\n\td.longitude = +d.longitude;\n\treturn d;\n};\n\nexport const usePenR = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tcsv(csvPenR).then((data) => {\n\t\t\tconst byProvince = group(data, (d) => d.province);\n\t\t\tconst byCity = group(data, (d) => d.city);\n\t\t\tsetData({\n\t\t\t\tbyProvince: byProvince,\n\t\t\t\tbyCity: byCity,\n\t\t\t\tallPenR: row(data),\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonWrld = 'https://unpkg.com/world-atlas@2.0.2/countries-10m.json';\n        \n\nexport const useWrld = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonWrld).then(topology => {\n\t\t\tconst { countries, land } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tland: feature(topology, land),\n\t\t\t\tcountries: mesh(topology, countries, (a, b) => a !== b)\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}