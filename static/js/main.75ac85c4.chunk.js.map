{"version":3,"sources":["GlobalStyle.js","helpers/useWindowSize.jsx","components/SVGContainer.jsx","components/ZoomContainer.jsx","components/DrawMap.jsx","components/DrawNL.jsx","components/Legend.jsx","App.jsx","data/useNLD.jsx","data/usePenR.jsx","data/useWorld.jsx","reportWebVitals.js","index.jsx"],"names":["colors","GlobalStyle","createGlobalStyle","normalize","useWindowSize","useState","width","undefined","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Context","createContext","SVGContainer","props","size","children","svgRef","useRef","svg","setSvg","current","ref","viewBox","Provider","value","useSvg","useContext","ZoomContainer","path","activeProvince","setActiveProvince","svgElement","x","y","k","setTransform","zoomed","event","transform","select","zoomMap","zoom","scaleExtent","on","currentProvince","node","bounds","x0","y0","x1","y1","transition","duration","call","zoomIdentity","translate","scale","Math","min","max","zoomTransform","invert","strokeWidth","Province","d","active","onClick","StyledProvincePath","className","title","properties","styled","Marks","data","projection","colorScale","colorValue","filteredUsage","console","log","length","r","map","longitude","latitude","StyledCircle","cx","cy","fill","id","circle","DrawMap","nld","penr","gemeente","province","provinceBorder","geoMercator","center","geoPath","features","statnaam","activateProvince","g","Legend","tickSpacing","tickSize","tickTextOffset","selectUsage","selectedUsage","fadeOpacity","LegendLabel","textAnchor","domain","domainValue","i","onMouseEnter","onMouseOut","opacity","dy","App","setData","json","then","topology","objects","gemeente_2020","provincie_2020","feature","mesh","a","b","useNLD","csv","replace","capacity","usePenR","countries","land","useWrld","setSelectedUsage","usage","filter","scaleOrdinal","range","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75ac85c4.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nexport const colors = {\n\tdarkBlue: '#2F80ED',\n\tblue: '#2D9CDB',\n\tlightBlue: '#B3E5FC',\n\tdark: '#333333',\n\tdarkGray: '#4F4F4F',\n\tmidGray: '#828282',\n\tlightGray: '#BDBDBD',\n\tlight: '#E0E0E0',\n\twhite: '#F2F2F2',\n\tdarkGreen: '#219653',\n\tgreen: '#27AE60',\n\tlightGreen: '#6FCF97',\n\torange: '#F2994A',\n\tdarkPurple: '#9B51E0',\n\tpurple: '#BB6BD9',\n\tred: '#EB5757',\n\tyellow: '#F2C94C',\n};\n\n/**\n * Converts a CSS hex color value to RGBA.\n * @param {string} hex - Expanded hexadecimal CSS color value.\n * @param {number} alpha - Alpha as a decimal.\n * @returns {string} RGBA CSS color value.\n */\nexport const addAlpha = (hex, alpha) => {\n\tconst r = parseInt(hex.substring(1, 3), 16);\n\tconst g = parseInt(hex.substring(3, 5), 16);\n\tconst b = parseInt(hex.substring(5, 7), 16);\n\treturn `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\nconst GlobalStyle = createGlobalStyle`\n    ${normalize};\n.App {\n  background-color: ${colors.white};\n  width: 100%;\n  height: 100%;\n}\n\n\n.provinces {\n\tfill: ${colors.lightGreen};\n\tstroke: ${colors.white};\n}\n\n.provinces .active {\n\topacity: .5;\n\ttransition: visibility 0s, opacity 0.5s linear;\n}\n\n.province-borders {\n\tfill: none;\n\tstroke: var(--white);\n\tstroke-width: 1;\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n\tpointer-events: none;\n}\n\n.gemeente-grens {\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n\tstroke: ${colors.green};\n\tstroke-opacity: 1;\n\t/* stroke-width: 0.1em; */\n\t/* transition-duration: 0.5s; */\n\tfill: ${colors.lightGreen};\n}\n\n    `;\n\nexport default GlobalStyle;\n","import React, { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n\t// Initialize state with undefined width/height so server and client renders match\n\t// Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n\tconst [windowSize, setWindowSize] = useState({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t});\n\n\tuseEffect(() => {\n\t\t// Handler to call on window resize\n\t\tfunction handleResize() {\n\t\t\t// Set window width/height to state\n\t\t\tsetWindowSize({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t});\n\t\t}\n\n\t\t// Add event listener\n\t\twindow.addEventListener('resize', handleResize);\n\n\t\t// Call handler right away so state gets updated with initial window size\n\t\thandleResize();\n\n\t\t// Remove event listener on cleanup\n\t\treturn () => window.removeEventListener('resize', handleResize);\n\t}, []); // Empty array ensures that effect is only run on mount\n\n\treturn windowSize;\n}\n\nexport default useWindowSize;\n","import React, {\n\tuseEffect,\n\tuseRef,\n\tuseState,\n\tcreateContext,\n\tuseContext,\n} from 'react';\n\nconst Context = createContext(null);\n\nexport const SVGContainer = (props) => {\n\tconst { size, children } = props;\n\tconst { width, height } = size;\n\tconst svgRef = useRef(null);\n\tconst [svg, setSvg] = useState(null);\n\tuseEffect(() => setSvg(svgRef.current), []);\n\treturn (\n\t\t<svg\n\t\t\tref={svgRef}\n\t\t\tviewBox={`0 0 ${'800'} ${'600'}`}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t>\n\t\t\t<Context.Provider value={svg}>{children}</Context.Provider>\n\t\t</svg>\n\t);\n};\n\nexport function useSvg() {\n\treturn useContext(Context);\n}\n","import {\n\tselect,\n\tzoom,\n\tgeoPath,\n\tselection,\n\tselectAll,\n\tzoomIdentity,\n\tpointer,\n\tzoomTransform,\n} from 'd3';\nimport React, { useState, useEffect } from 'react';\nimport { useSvg } from './SVGContainer';\n\nexport const ZoomContainer = (props) => {\n\tconst { children, path, activeProvince, size, setActiveProvince } = props;\n\tconst { width, height } = size;\n\tconst svgElement = useSvg();\n\n\tconst [{ x, y, k }, setTransform] = useState({ x: 0, y: 0, k: 1 });\n\tconst zoomed = (event) => {\n\t\tconst { transform } = event;\n\t\tsetTransform(transform);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!svgElement) return;\n\t\tconst svg = select(svgElement);\n\t\tconst zoomMap = zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n\n\t\tconst reset = () => {\n\t\t\t// provinces.transition().style('fill', null).attr('class', null);\n\t\t\tsvg.transition()\n\t\t\t\t.duration(750)\n\t\t\t\t.call(\n\t\t\t\t\tzoomMap.transform,\n\t\t\t\t\tzoomIdentity,\n\t\t\t\t\tzoomTransform(svg.node()).invert([width / 2, height / 2])\n\t\t\t\t);\n\t\t\tsetActiveProvince(null);\n\t\t};\n\t\tif (activeProvince) {\n\t\t\tconst currentProvince = select(activeProvince).node();\n\t\t\tconst [[x0, y0], [x1, y1]] = path.bounds(currentProvince);\n\t\t\tsvg.transition()\n\t\t\t\t.duration(750)\n\t\t\t\t.call(\n\t\t\t\t\tzoomMap.transform,\n\t\t\t\t\tzoomIdentity\n\t\t\t\t\t\t.translate(width / 4, height / 4)\n\t\t\t\t\t\t.scale(\n\t\t\t\t\t\t\tMath.min(\n\t\t\t\t\t\t\t\t8,\n\t\t\t\t\t\t\t\t0.9 /\n\t\t\t\t\t\t\t\t\tMath.max(\n\t\t\t\t\t\t\t\t\t\t(x1 - x0) / width,\n\t\t\t\t\t\t\t\t\t\t(y1 - y0) / height\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.translate(-(x0 + x1) / 2, -(y0 + y1) / 2)\n\t\t\t\t);\n\t\t} else {\n\t\t\treset();\n\t\t}\n\n\t\tsvg.call(zoomMap);\n\t\treturn;\n\t}, [svgElement, activeProvince]);\n\n\treturn (\n\t\t<g transform={`translate(${x}, ${y}) scale(${k})`} strokeWidth={1 / k}>\n\t\t\t{children}\n\t\t</g>\n\t);\n};\n","import React, { useRef, useState, useEffect, forwardRef } from 'react';\nimport styled from 'styled-components';\nimport { ZoomContainer } from './ZoomContainer';\nimport { colors, addAlpha } from '../GlobalStyle';\n\nimport { geoMercator, geoPath, scaleLinear, max } from 'd3';\n\nexport const DrawMap = (props) => {\n\tconst { nld, penr, size, filteredUsage, colorScale, colorValue } = props;\n\tconst { gemeente, province, provinceBorder } = nld;\n\n\tconst projection = geoMercator().scale(6000).center([5.6, 52.2]);\n\tconst path = geoPath().projection(projection);\n\t// const provinceEl = useRef(null);\n\n\t// const provinceRef = useRef(null);\n\t// const [provinces, setProvinces] = useState(null);\n\tconst maxCap = (d) => max(d);\n\n\tconst capacityColors = (d) => {\n\t\tscaleLinear().domain([1, 1000]).range(['white', 'black']);\n\t};\n\tconst [activeProvince, setActiveProvince] = useState(null);\n\tconst [activeCity, setActiveCity] = useState(null);\n\n\tconst activateProvince = (d) => {\n\t\tif (activeProvince === null || activeProvince !== d)\n\t\t\treturn setActiveProvince(d);\n\t\tif (activeProvince === d) {\n\t\t\treturn setActiveProvince(null);\n\t\t}\n\t};\n\n\tconst activateCity = (d) => {\n\t\tif (activeCity === null || activeCity !== d.city) {\n\t\t\tconsole.log(d);\n\t\t\treturn setActiveCity(d.city);\n\t\t}\n\t\tif (activeCity === d.city) {\n\t\t\treturn setActiveCity(null);\n\t\t}\n\t};\n\n\t// useEffect(() => props.svg(activeProvince), []);\n\t// useEffect(() => setProvinces(provinceRef.current), []);\n\n\tuseEffect(() => {}, []);\n\n\treturn (\n\t\t<ZoomContainer\n\t\t\tsetActiveProvince={setActiveProvince}\n\t\t\tactiveProvince={activeProvince}\n\t\t\tpath={path}\n\t\t\tsize={size}\n\t\t>\n\t\t\t<g className='gemeentes'>\n\t\t\t\t{gemeente.features.map((d) => (\n\t\t\t\t\t<path key={d.id} className='gemeente-grens' d={path(d)} />\n\t\t\t\t))}\n\t\t\t</g>\n\t\t\t<g className='provinces'>\n\t\t\t\t{province.features.map((d) => (\n\t\t\t\t\t<Province\n\t\t\t\t\t\tdata={d}\n\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\td={path(d)}\n\t\t\t\t\t\ttitle={d.properties.statnaam}\n\t\t\t\t\t\tactive={activeProvince === d}\n\t\t\t\t\t\tonClick={() => activateProvince(d)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</g>\n\n\t\t\t<path className='province-borders' d={path(provinceBorder)} />\n\t\t\t{/* {penr.map((d) => {\n\t\t\t\tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t\t\treturn (\n\t\t\t\t\t<Circle\n\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\tcx={x}\n\t\t\t\t\t\tcy={y}\n\t\t\t\t\t\tr={1}\n\t\t\t\t\t\tfill={colorScale(colorValue(d))}\n\t\t\t\t\t\tdata={d}\n\t\t\t\t\t\tactiveProvince={activeProvince}\n\t\t\t\t\t\tactive={activeCity === d.city}\n\t\t\t\t\t\tonClick={() => activateCity(d)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})} */}\n\t\t\t<Marks\n\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\tdata={penr}\n\t\t\t\tprojection={projection}\n\t\t\t\tcolorScale={colorScale}\n\t\t\t\tcolorValue={colorValue}\n\t\t\t/>\n\t\t\t<Marks\n\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\tdata={filteredUsage}\n\t\t\t\tprojection={projection}\n\t\t\t\tcolorScale={colorScale}\n\t\t\t\tcolorValue={colorValue}\n\t\t\t/>\n\t\t</ZoomContainer>\n\t);\n};\n\nconst Province = ({ d, active, onClick }) => {\n\treturn (\n\t\t<StyledProvincePath\n\t\t\tclassName={active ? 'province active' : 'province'}\n\t\t\td={d}\n\t\t\tonClick={onClick}\n\t\t\ttitle={d.properties}\n\t\t/>\n\t);\n};\n\nconst StyledProvincePath = styled.path`\n\t/* transition-duration: 700ms; */\n\n\t:hover {\n\t\topacity: 0.7;\n\t}\n`;\n\nconst Marks = ({ data, projection, colorScale, colorValue, filteredUsage }) => {\n\tconsole.log(data.length);\n\tlet r = 1;\n\tif (data === filteredUsage) {\n\t\tr = r + 2;\n\t}\n\treturn (\n\t\t<>\n\t\t\t{data.map((d) => {\n\t\t\t\tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t\t\treturn (\n\t\t\t\t\t<StyledCircle\n\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\tcx={x}\n\t\t\t\t\t\tcy={y}\n\t\t\t\t\t\tr={r}\n\t\t\t\t\t\tfill={colorScale(colorValue(d))}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</>\n\t);\n};\nconst Circle = ({ cx, cy, r, data, activeProvince, onClick, active, fill }) => {\n\tconst { province, city, capacity } = data;\n\n\tif (activeProvince && activeProvince.properties.statnaam == province) {\n\t\tr = r / 1;\n\t}\n\n\treturn (\n\t\t<StyledCircle\n\t\t\tcx={cx}\n\t\t\tcy={cy}\n\t\t\tr={r}\n\t\t\tonClick={onClick}\n\t\t\tactive={active}\n\t\t\tfill={fill}\n\t\t/>\n\t);\n};\n\nconst StyledCircle = styled.circle`\n\ttransform: 1s;\n\ttransition-duration: 700ms;\n\t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n\tfill-opacity: 0.7;\n\tstroke: ${(props) => (props.active ? colors.red : colors.blue)};\n\t/* stroke-width: 0.5; */\n\t&:hover {\n\t\tfill: ${colors.darkBlue};\n\t}\n`;\n\nexport default DrawMap;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { ZoomContainer } from './ZoomContainer';\nimport { colors, addAlpha } from '../GlobalStyle';\nimport { useSvg } from './SVGContainer';\nimport { geoMercator, geoPath, scaleLinear, max, min, select } from 'd3';\n\nexport const DrawNL = (props) => {\n\tconst gemeentesRef = useRef(null);\n\tconst provincesRef = useRef(null);\n\tconst parkingRef = useRef(null);\n\tconst { size, nld, penr } = props;\n\tconst { gemeente, province, provinceBorder } = nld;\n\tconst { allPenR } = penr;\n\n\t// const provinces = province.features;\n\n\tconst svgElement = useSvg();\n\n\tconst capacityColors = scaleLinear()\n\t\t.domain([1, 1000])\n\t\t.range(['white', 'black']);\n\tconst [activeProvince, setActiveProvince] = useState(null);\n\tconst [activeCity, setActiveCity] = useState(null);\n\tconst [provincesEl, setProvincesEl] = useState(null);\n\t// useEffect(() => props.svg(activeProvince), []);\n\tconst activateProvince = (event, d) => {\n\t\tif (activeProvince === null || activeProvince !== d) {\n\t\t\tconsole.log(d);\n\t\t\treturn setActiveProvince(d);\n\t\t}\n\t\tif (activeProvince === d) {\n\t\t\tconsole.log(d);\n\t\t\treturn setActiveProvince(null);\n\t\t}\n\t};\n\tconst projection = geoMercator().scale(6000).center([5.55, 52.2]);\n\tconst path = geoPath().projection(projection);\n\tuseEffect(() => {\n\t\tif (!svgElement) return;\n\n\t\tconst svg = select(svgElement);\n\n\t\tconst gemeentes = svg.select('.gemeentes').selectAll('path');\n\t\tconst provinces = svg.select('.provinces').selectAll('path');\n\t\tconst parking = svg.select('.parking-locations').selectAll('circle');\n\n\t\tsetProvincesEl(provinces);\n\n\t\t// const minCap = min(allPenR.capacity);\n\t\t// const maxCap = max(allPenR.capacity);\n\t\tconst capacityColors = scaleLinear()\n\t\t\t.domain([0, 1000])\n\t\t\t.range(['white', 'black']);\n\n\t\t// const setPoints = (d) => {\n\t\t// \tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t// };\n\n\t\tgemeentes\n\t\t\t.data(gemeente.features)\n\t\t\t.enter()\n\t\t\t.append('path')\n\t\t\t.attr('d', path)\n\t\t\t.attr('class', 'gemeente-grens');\n\n\t\tprovinces\n\t\t\t.data(province.features)\n\t\t\t.enter()\n\t\t\t.append('path')\n\t\t\t.attr('d', path)\n\t\t\t.attr('class', 'province')\n\t\t\t.on('click', activateProvince);\n\n\t\tparking\n\t\t\t.data(allPenR)\n\t\t\t.enter()\n\t\t\t.append('circle')\n\t\t\t.attr('r', '1')\n\t\t\t.attr('cx', (d) => projection([d.longitude, d.latitude])[0])\n\t\t\t.attr('cy', (d) => projection([d.longitude, d.latitude])[1]);\n\n\t\t// parking.transition().duration(500).attr('r', '2');\n\t}, [svgElement]);\n\n\treturn (\n\t\t<ZoomContainer\n\t\t\tsize={size}\n\t\t\tsetActiveProvince={setActiveProvince}\n\t\t\tactiveProvince={activeProvince}\n\t\t\tprovinces={provincesEl}\n\t\t\tpath={path}\n\t\t>\n\t\t\t<g className='gemeentes' />\n\t\t\t<g className='provinces' />\n\t\t\t<g className='parking-locations' />\n\t\t</ZoomContainer>\n\t);\n};\n\nconst StyledG = styled.g``;\n\n// const Province = ({ d, isActive, onClick }) => {\n// \treturn (\n// \t\t<StyledProvincePath\n// \t\t\tclassName={isActive ? 'province active' : 'province'}\n// \t\t\td={d}\n// \t\t\tonClick={onClick}\n// \t\t\ttitle={d.properties}\n// \t\t/>\n// \t);\n// };\n\n// const StyledProvincePath = styled.path`\n// \t/* transition-duration: 700ms; */\n\n// \t:hover {\n// \t\topacity: 0.5;\n// \t}\n// `;\n\n// const Circle = ({\n// \tcx,\n// \tcy,\n// \tr,\n// \tdata,\n// \tactiveProvince,\n// \tonMouseEnter,\n// \tactiveCity,\n// \tfill,\n// }) => {\n// \tconst { province, city, capacity } = data;\n\n// \tif (activeProvince && activeProvince.properties.statnaam == province) {\n// \t\tr = r * 1.5;\n// \t}\n\n// \treturn (\n// \t\t<StyledCircle\n// \t\t\tcx={cx}\n// \t\t\tcy={cy}\n// \t\t\tr={r}\n// \t\t\tonClick={onMouseEnter}\n// \t\t\tactive={activeCity}\n// \t\t\tfill={fill}\n// \t\t/>\n// \t);\n// };\n\n// const StyledCircle = styled.circle`\n// \ttransition-duration: 700ms;\n// \t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n// \tfill-opacity: 1;\n// \tstroke: ${(props) => (props.active ? colors.red : colors.blue)};\n// \tstroke-width: 0.5;\n// \t&:hover {\n// \t\tfill: ${colors.darkBlue};\n// \t}\n// `;\n\nexport default DrawNL;\n","import React from 'react';\n\nconst Legend = ({\n\tcolorScale,\n\ttickSpacing = 20,\n\ttickSize = 10,\n\ttickTextOffset = 20,\n\tselectUsage,\n\tselectedUsage,\n\tfadeOpacity,\n\tLegendLabel,\n}) => {\n\treturn (\n\t\t<g transform={`translate(${50 + 60}, 60)`}>\n\t\t\t<text x={35} y={-25} className='axis-label' textAnchor='middle'>\n\t\t\t\t{LegendLabel}\n\t\t\t</text>\n\t\t\t{colorScale.domain().map((domainValue, i) => (\n\t\t\t\t<g\n\t\t\t\t\tkey={i}\n\t\t\t\t\tclassName='tick'\n\t\t\t\t\ttransform={`translate(10,${i * tickSpacing})`}\n\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\tconsole.log(domainValue);\n\t\t\t\t\t\tselectUsage(domainValue);\n\t\t\t\t\t}}\n\t\t\t\t\tonMouseOut={() => {\n\t\t\t\t\t\tselectUsage(null);\n\t\t\t\t\t}}\n\t\t\t\t\topacity={\n\t\t\t\t\t\tselectedUsage && domainValue !== selectedUsage\n\t\t\t\t\t\t\t? fadeOpacity\n\t\t\t\t\t\t\t: 1\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<circle fill={colorScale(domainValue)} r={tickSize} />\n\t\t\t\t\t<text x={tickTextOffset} dy='.32em'>\n\t\t\t\t\t\t{domainValue}\n\t\t\t\t\t</text>\n\t\t\t\t</g>\n\t\t\t))}\n\t\t</g>\n\t);\n};\n\nexport default Legend;\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport './App.css';\nimport GlobalStyle from './GlobalStyle';\nimport { useNLD } from './data/useNLD';\nimport { usePenR } from './data/usePenR';\nimport { useWrld } from './data/useWorld';\n\nimport useWindowSize from './helpers/useWindowSize';\nimport useResizeObserver from './helpers/useResizeObserver';\n\nimport { SVGContainer } from './components/SVGContainer';\nimport DrawMap from './components/DrawMap';\nimport DrawNL from './components/DrawNL';\n\nimport { geoMercator, geoPath, scaleLinear, max, scaleOrdinal } from 'd3';\nimport Legend from './components/Legend';\n\nconst App = () => {\n\tconst nld = useNLD();\n\tconst penr = usePenR();\n\tconst wrld = useWrld();\n\tconst size = useWindowSize();\n\tconst [selectedUsage, setSelectedUsage] = useState(null);\n\tif (!nld || !penr || !size) {\n\t\treturn <pre>Loading...</pre>;\n\t}\n\n\tconst colorValue = (d) => d.usage;\n\tconst LegendLabel = 'Gebruik';\n\tconst filteredUsage = penr.filter((d) => selectedUsage === colorValue(d));\n\tconst colorScale = scaleOrdinal()\n\t\t.domain(penr.map(colorValue))\n\t\t.range(['#E6842A', '#137B80', '#8E6C8A']);\n\t// const wrapperRef = useRef(null);\n\n\t// useEffect(() => {\n\t// \t// size = wrapperRef.current.getBoundingClientRect();\n\t// }, []);\n\n\t// const [activeProvince, setActiveProvince] = useState(null);\n\treturn (\n\t\t<div className='App'>\n\t\t\t<div>\n\t\t\t\t<SVGContainer size={size}>\n\t\t\t\t\t<DrawMap\n\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\tnld={nld}\n\t\t\t\t\t\tpenr={penr}\n\t\t\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <DrawNL nld={nld} penr={penr} size={size} /> */}\n\t\t\t\t\t<Legend\n\t\t\t\t\t\tpenr={penr}\n\t\t\t\t\t\tselectUsage={setSelectedUsage}\n\t\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\t\ttickSpacing={22}\n\t\t\t\t\t\ttickSize={10}\n\t\t\t\t\t\ttickTextOffset={12}\n\t\t\t\t\t\tfadeOpacity={3}\n\t\t\t\t\t\tLegendLabel={LegendLabel}\n\t\t\t\t\t/>\n\t\t\t\t</SVGContainer>\n\t\t\t\t{/* <MapNL/> */}\n\t\t\t\t<GlobalStyle />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonNLD =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/nl_2020.json';\n\nexport const useNLD = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonNLD).then((topology) => {\n\t\t\tconst { gemeente_2020, provincie_2020 } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tgemeente: feature(topology, gemeente_2020),\n\t\t\t\tprovince: feature(topology, provincie_2020),\n\t\t\t\tprovinceBorder: mesh(\n\t\t\t\t\ttopology,\n\t\t\t\t\tprovincie_2020,\n\t\t\t\t\t(a, b) => a !== b\n\t\t\t\t),\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};\n","import { useState, useEffect } from 'react';\nimport { csv, group } from 'd3';\n\nconst csvPenR =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/OpenParkingPenR.csv';\n\nconst csvParking =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/55947d8316f6ab6cf5aa564229e5461d9414bf5b/openParking.csv';\nconst row = (d) => {\n\td.province = +d.province;\n\td.latitude = +d.latitude;\n\td.longitude = +d.longitude;\n\td.capacity = +d.capacity;\n\treturn d;\n};\n\n// export const usePenR = () => {\n// \tconst [data, setData] = useState(null);\n// \tuseEffect(() => {\n// \t\tcsv(csvParking, cleanPenR).then((data) => {\n// \t\t\tconst byProvince = group(data, (d) => d.province);\n// \t\t\tconst byCity = group(data, (d) => d.city);\n// \t\t\tsetData({\n// \t\t\t\tbyProvince: byProvince,\n// \t\t\t\tbyCity: byCity,\n// \t\t\t\tallPenR: data,\n// \t\t\t});\n// \t\t});\n// \t}, []);\n// \treturn data;\n// };\n\nexport const usePenR = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tconst cleanPenR = (d) => {\n\t\t\td.province = d.province.replace('Fryslân', 'Friesland');\n\t\t\td.latitude = +d.latitude;\n\t\t\td.longitude = +d.longitude;\n\t\t\td.capacity = +d.capacity;\n\n\t\t\treturn d;\n\t\t};\n\t\tcsv(csvParking, cleanPenR).then(setData);\n\t}, []);\n\treturn data;\n};\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonWrld = 'https://unpkg.com/world-atlas@2.0.2/countries-10m.json';\n        \n\nexport const useWrld = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonWrld).then(topology => {\n\t\t\tconst { countries, land } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tland: feature(topology, land),\n\t\t\t\tcountries: mesh(topology, countries, (a, b) => a !== b)\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}