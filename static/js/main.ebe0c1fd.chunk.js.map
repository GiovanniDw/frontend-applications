{"version":3,"sources":["GlobalStyles.jsx","data/usePenR.jsx","helpers/useWindowSize.jsx","components/SVGContainer.jsx","components/Loading.jsx","components/StyledComponents.jsx","components/ZoomContainer.jsx","components/DrawMap.jsx","components/DrawNL.jsx","components/Legend.jsx","App.jsx","data/useNLD.jsx","data/useWorld.jsx","reportWebVitals.js","index.jsx"],"names":["colors","darkBlue","blue","lightBlue","dark","darkGray","midGray","lightGray","light","white","darkGreen","green","lightGreen","orange","darkPurple","purple","red","yellow","GlobalStyle","createGlobalStyle","normalize","cleanParkingData","d","id","usage","replace","latitude","longitude","capacity","useWindowSize","Context","createContext","SVGContainer","props","size","children","className","width","height","svgRef","useRef","useState","svg","setSvg","useEffect","current","ref","viewBox","Provider","value","useSvg","useContext","Loading","StyledLoading","StyledSpinner","cx","cy","r","fill","strokeWidth","styled","div","primary","Container","px2vw","StyledCircle","circle","active","ZoomContainer","path","activeProvince","setActiveProvince","svgElement","x","y","k","setTransform","zoomed","event","transform","select","zoomMap","zoom","scaleExtent","on","currentProvince","node","bounds","x0","y0","x1","y1","transition","duration","call","zoomIdentity","translate","scale","Math","min","max","zoomTransform","invert","sizeValue","Province","onClick","StyledProvincePath","title","properties","Marks","data","projection","colorScale","colorValue","filteredUsage","selectedUsage","fadeOpacity","sizeScale","map","console","log","statnaam","province","reduceSizeOnScale","opacity","DrawMap","nld","penr","gemeente","provinceBorder","geoMercator","center","geoPath","useMemo","scaleSqrt","domain","range","features","activateProvince","g","Legend","tickSpacing","tickSize","tickTextOffset","selectUsage","LegendLabel","textAnchor","domainValue","i","onMouseEnter","onMouseOut","dy","App","setData","json","then","topology","objects","gemeente_2020","provincie_2020","feature","mesh","a","b","useNLD","dsv","usePenR","innerContainerRef","countries","land","useWrld","setSelectedUsage","filter","scaleOrdinal","style","marginBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebe0c1fd.chunk.js","sourcesContent":["import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nexport const colors = {\n\tdarkBlue: '#2F80ED',\n\tblue: '#2D9CDB',\n\tlightBlue: '#B3E5FC',\n\tdark: '#333333',\n\tdarkGray: '#4F4F4F',\n\tmidGray: '#828282',\n\tlightGray: '#BDBDBD',\n\tlight: '#E0E0E0',\n\twhite: '#F2F2F2',\n\tdarkGreen: '#219653',\n\tgreen: '#27AE60',\n\tlightGreen: '#6FCF97',\n\torange: '#F2994A',\n\tdarkPurple: '#9B51E0',\n\tpurple: '#BB6BD9',\n\tred: '#EB5757',\n\tyellow: '#F2C94C',\n};\n\n/**\n * Converts a CSS hex color value to RGBA.\n * @param {string} hex - Expanded hexadecimal CSS color value.\n * @param {number} alpha - Alpha as a decimal.\n * @returns {string} RGBA CSS color value.\n */\nexport const addAlpha = (hex, alpha) => {\n\tconst r = parseInt(hex.substring(1, 3), 16);\n\tconst g = parseInt(hex.substring(3, 5), 16);\n\tconst b = parseInt(hex.substring(5, 7), 16);\n\treturn `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\nexport const px2vw = (size, width = 1440) => `${(size / width) * 100}vw`;\n\nexport const GlobalStyle = createGlobalStyle`\n    ${normalize};\n.App {\n  background-color: ${colors.white};\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n}\n\n.province {\n\tstroke-opacity: 0.5;\n\tstroke-width: 1px;\n\t/* stroke: none; */\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n}\n.gemeente {\n\tfill-opacity: 1;\n\n\t/* stroke: white; */\n}\n\n.provinces {\n\tfill: ${colors.lightGreen};\n\tstroke: ${colors.white};\n\ttransition: 0.3s;\n}\n\n.provinces .active {\n\topacity: .5;\n\ttransition: visibility 0s, opacity 0.5s linear;\n}\n\n.province-borders {\n\tfill: none;\n\tstroke: var(--white);\n\tstroke-width: 1;\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n\tpointer-events: none;\n}\n\n.gemeente-grens {\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n\tstroke: ${colors.green};\n\tstroke-opacity: 1;\n\t/* stroke-width: 0.1em; */\n\t/* transition-duration: 0.5s; */\n\tfill: ${colors.lightGreen};\n}\n\n    `;\n\nexport default GlobalStyle;\n","import { useState, useEffect } from 'react';\nimport { csv, group, dsv } from 'd3';\n\nconst csvPenR =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/OpenParkingPenR.csv';\n\nconst csvParking =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/55947d8316f6ab6cf5aa564229e5461d9414bf5b/openParking.csv';\n\nconst parkeerData =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/5f69fabb70e85ae64cf19633aadd38fcf26a75a4/parkeerData.csv';\n\nconst ssv = '';\n\nconst row = (d) => {\n\td.latitude = +d.latitude;\n\td.longitude = +d.longitude;\n\td.capacity = +d.capacity;\n\treturn d;\n};\n\n// export const usePenR = () => {\n// \tconst [data, setData] = useState(null);\n// \tuseEffect(() => {\n// \t\tcsv(csvParking, cleanPenR).then((data) => {\n// \t\t\tconst byProvince = group(data, (d) => d.province);\n// \t\t\tconst byCity = group(data, (d) => d.city);\n// \t\t\tsetData({\n// \t\t\t\tbyProvince: byProvince,\n// \t\t\t\tbyCity: byCity,\n// \t\t\t\tallPenR: data,\n// \t\t\t});\n// \t\t});\n// \t}, []);\n// \treturn data;\n// };\n\nconst cleanParkingData = (d) => {\n\t// d.province = d.province.replace('Fryslân', 'Friesland');\n\td.id = +d.id;\n\td.usage = d.usage\n\t\t.replace('park and ride', 'P+R Parkeerplaats')\n\t\t.replace('garage', 'Parkeergarage')\n\t\t.replace('terrain', 'Parkeerterrein');\n\td.latitude = +d.latitude;\n\td.longitude = +d.longitude;\n\td.capacity = +d.capacity;\n\t// console.log(d);\n\n\treturn d;\n};\nexport const usePenR = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\t// csv(csvParking, cleanParkingData).then(setData);\n\t\tdsv(';', parkeerData, cleanParkingData).then(setData);\n\t}, []);\n\treturn data;\n};\n","import React, { useState, useEffect } from 'react';\n\nfunction useWindowSize() {\n\t// Initialize state with undefined width/height so server and client renders match\n\t// Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n\tconst [windowSize, setWindowSize] = useState({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t});\n\n\tuseEffect(() => {\n\t\t// Handler to call on window resize\n\t\tfunction handleResize() {\n\t\t\t// Set window width/height to state\n\t\t\tsetWindowSize({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t});\n\t\t}\n\n\t\t// Add event listener\n\t\twindow.addEventListener('resize', handleResize);\n\n\t\t// Call handler right away so state gets updated with initial window size\n\t\thandleResize();\n\n\t\t// Remove event listener on cleanup\n\t\treturn () => window.removeEventListener('resize', handleResize);\n\t}, []); // Empty array ensures that effect is only run on mount\n\n\treturn windowSize;\n}\n\nexport default useWindowSize;\n","import React, {\n\tuseEffect,\n\tuseRef,\n\tuseState,\n\tcreateContext,\n\tuseContext,\n} from 'react';\n\nconst Context = createContext(null);\n\nexport const SVGContainer = (props) => {\n\tconst { size, children, className } = props;\n\tconst { width, height } = size;\n\tconst svgRef = useRef(null);\n\tconst [svg, setSvg] = useState(null);\n\tuseEffect(() => setSvg(svgRef.current), []);\n\treturn (\n\t\t<svg\n\t\t\tclassName={className}\n\t\t\tref={svgRef}\n\t\t\tviewBox={`0 0 ${'800'} ${'600'}`}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t>\n\t\t\t<Context.Provider value={svg}>{children}</Context.Provider>\n\t\t</svg>\n\t);\n};\n\nexport function useSvg() {\n\treturn useContext(Context);\n}\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { colors } from '../GlobalStyles';\nexport const Loading = () => (\n\t<StyledLoading>\n\t\t<StyledSpinner viewBox='0 0 50 50'>\n\t\t\t<circle\n\t\t\t\tclassName='path'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='4'\n\t\t\t/>\n\t\t\t<circle\n\t\t\t\tclassName='path'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='4'\n\t\t\t/>\n\t\t\t<circle\n\t\t\t\tclassName='path'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='4'\n\t\t\t/>\n\t\t</StyledSpinner>\n\t</StyledLoading>\n);\n\nexport const StyledSpinner = styled.svg`\n\tanimation: rotate 2s linear infinite;\n\tmargin: -25px 0 0 -25px;\n\twidth: 50px;\n\theight: 50px;\n\n\t& .path {\n\t\tstroke: ${colors.green};\n\t\tstroke-linecap: round;\n\t\tanimation: dash 1.5s ease-in-out infinite;\n\t}\n\n\t@keyframes rotate {\n\t\t100% {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t@keyframes dash {\n\t\t0% {\n\t\t\tstroke-dasharray: 1, 150;\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t\t50% {\n\t\t\tstroke-dasharray: 90, 150;\n\t\t\tstroke-dashoffset: -35;\n\t\t}\n\t\t100% {\n\t\t\tstroke-dasharray: 90, 150;\n\t\t\tstroke-dashoffset: -124;\n\t\t}\n\t}\n`;\n\nconst StyledLoading = styled.div`\n\theight: 100vh;\n\twidth: 100vw;\n\tbackground: ${colors.primary};\n\tz-index: 4;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { px2vw, colors } from '../GlobalStyles';\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n\tmargin: ${px2vw(32)};\n\tmax-width: 100%;\n\n\t.map {\n\t\tborder: 1px solid red;\n\t}\n\t.legend {\n\t\tposition: absolute;\n\n\t\tbottom: 0;\n\t\tleft: 10px;\n\t}\n`;\n\nexport const StyledCircle = styled.circle`\n\ttransition-duration: 100ms;\n\t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n\tfill-opacity: 1;\n\t/* stroke: ${(props) => (props.active ? colors.red : colors.blue)}; */\n\t/* stroke-width: 0.5; */\n\tstroke-width: ${(props) => (props.active ? 1 : 3)};\n\t&:hover {\n\t\tfill: ${colors.darkBlue};\n\t}\n`;\n","import {\n\tselect,\n\tzoom,\n\tgeoPath,\n\tselection,\n\tselectAll,\n\tzoomIdentity,\n\tpointer,\n\tzoomTransform,\n} from 'd3';\nimport React, { useState, useEffect } from 'react';\nimport { useSvg } from './SVGContainer';\n\nexport const ZoomContainer = (props) => {\n\tconst { children, path, activeProvince, size, setActiveProvince } = props;\n\tconst { width, height } = size;\n\tconst svgElement = useSvg();\n\n\tconst [{ x, y, k }, setTransform] = useState({ x: 0, y: 0, k: 1 });\n\tconst zoomed = (event) => {\n\t\tconst { transform } = event;\n\t\tsetTransform(transform);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!svgElement) return;\n\t\tconst svg = select(svgElement);\n\t\tconst zoomMap = zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n\n\t\tconst reset = () => {\n\t\t\t// provinces.transition().style('fill', null).attr('class', null);\n\t\t\tsvg.transition()\n\t\t\t\t.duration(750)\n\t\t\t\t.call(\n\t\t\t\t\tzoomMap.transform,\n\t\t\t\t\tzoomIdentity,\n\t\t\t\t\tzoomTransform(svg.node()).invert([width / 2, height / 2])\n\t\t\t\t);\n\t\t\tsetActiveProvince(null);\n\t\t};\n\t\tif (activeProvince) {\n\t\t\tconst currentProvince = select(activeProvince).node();\n\t\t\tconst [[x0, y0], [x1, y1]] = path.bounds(currentProvince);\n\t\t\tsvg.transition()\n\t\t\t\t.duration(750)\n\t\t\t\t.call(\n\t\t\t\t\tzoomMap.transform,\n\t\t\t\t\tzoomIdentity\n\t\t\t\t\t\t.translate(width / 2, height / 2)\n\t\t\t\t\t\t.scale(\n\t\t\t\t\t\t\tMath.min(\n\t\t\t\t\t\t\t\t8,\n\t\t\t\t\t\t\t\t0.9 /\n\t\t\t\t\t\t\t\t\tMath.max(\n\t\t\t\t\t\t\t\t\t\t(x1 - x0) / width,\n\t\t\t\t\t\t\t\t\t\t(y1 - y0) / height\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.translate(-(x0 + x1) / 2, -(y0 + y1) / 2)\n\t\t\t\t);\n\t\t} else {\n\t\t\treset();\n\t\t}\n\n\t\tsvg.call(zoomMap);\n\t\treturn;\n\t}, [svgElement, activeProvince]);\n\n\treturn (\n\t\t<g transform={`translate(${x}, ${y}) scale(${k})`} strokeWidth={1 / k}>\n\t\t\t{children}\n\t\t</g>\n\t);\n};\n","import React, { useRef, useState, useEffect, forwardRef, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { ZoomContainer } from './ZoomContainer';\nimport { SVGContainer } from './SVGContainer';\nimport { colors, addAlpha } from '../GlobalStyles';\n\nimport { geoMercator, geoPath, scaleLinear, max, scaleSqrt } from 'd3';\n\nconst sizeValue = (d) => d.capacity;\nconst maxRadius = 15;\nexport const DrawMap = (props) => {\n\tconst {\n\t\tnld,\n\t\tpenr,\n\t\tsize,\n\t\tfilteredUsage,\n\t\tcolorScale,\n\t\tcolorValue,\n\t\tselectedUsage,\n\t\tfadeOpacity,\n\t} = props;\n\tconst { gemeente, province, provinceBorder } = nld;\n\n\tconst projection = geoMercator().scale(6000).center([5.4, 52.2]);\n\tconst path = geoPath().projection(projection);\n\t// const provinceEl = useRef(null);\n\n\t// const provinceRef = useRef(null);\n\t// const [provinces, setProvinces] = useState(null);\n\n\tconst capacityColors = (d) => {\n\t\tscaleLinear().domain([1, 1000]).range(['white', 'black']);\n\t};\n\tconsole.log(penr);\n\tconst sizeScale = useMemo(\n\t\t() =>\n\t\t\tscaleSqrt()\n\t\t\t\t.domain([0, max(penr, sizeValue)])\n\t\t\t\t.range([0, maxRadius]),\n\t\t[nld, penr, sizeValue, maxRadius]\n\t);\n\n\tconst [activeProvince, setActiveProvince] = useState(null);\n\tconst [activeCity, setActiveCity] = useState(null);\n\n\tconst activateProvince = (d) => {\n\t\tif (activeProvince === null || activeProvince !== d)\n\t\t\treturn setActiveProvince(d);\n\t\tif (activeProvince === d) {\n\t\t\treturn setActiveProvince(null);\n\t\t}\n\t};\n\n\tconst activateCity = (d) => {\n\t\tif (activeCity === null || activeCity !== d.city) {\n\t\t\treturn setActiveCity(d.city);\n\t\t}\n\t\tif (activeCity === d.city) {\n\t\t\treturn setActiveCity(null);\n\t\t}\n\t};\n\n\t// useEffect(() => props.svg(activeProvince), []);\n\t// useEffect(() => setProvinces(provinceRef.current), []);\n\n\tuseEffect(() => {}, []);\n\n\treturn (\n\t\t<ZoomContainer\n\t\t\tsetActiveProvince={setActiveProvince}\n\t\t\tactiveProvince={activeProvince}\n\t\t\tpath={path}\n\t\t\tsize={size}\n\t\t>\n\t\t\t<g className='gemeentes'>\n\t\t\t\t{gemeente.features.map((d) => (\n\t\t\t\t\t<path key={d.id} className='gemeente-grens' d={path(d)} />\n\t\t\t\t))}\n\t\t\t</g>\n\t\t\t<g className='provinces'>\n\t\t\t\t{province.features.map((d) => (\n\t\t\t\t\t<Province\n\t\t\t\t\t\tdata={d}\n\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\td={path(d)}\n\t\t\t\t\t\ttitle={d.properties.statnaam}\n\t\t\t\t\t\tactive={activeProvince === d}\n\t\t\t\t\t\tonClick={() => activateProvince(d)}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</g>\n\n\t\t\t<path className='province-borders' d={path(provinceBorder)} />\n\t\t\t{/* {penr.map((d) => {\n\t\t\t\tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t\t\treturn (\n\t\t\t\t\t<Circle\n\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\tcx={x}\n\t\t\t\t\t\tcy={y}\n\t\t\t\t\t\tr={1}\n\t\t\t\t\t\tfill={colorScale(colorValue(d))}\n\t\t\t\t\t\tdata={d}\n\t\t\t\t\t\tactiveProvince={activeProvince}\n\t\t\t\t\t\tactive={activeCity === d.city}\n\t\t\t\t\t\tonClick={() => activateCity(d)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})} */}\n\t\t\t<Marks\n\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\tdata={penr}\n\t\t\t\tprojection={projection}\n\t\t\t\tcolorScale={colorScale}\n\t\t\t\tcolorValue={colorValue}\n\t\t\t\tactiveProvince={activeProvince}\n\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\tfadeOpacity={fadeOpacity}\n\t\t\t\tsizeScale={sizeScale}\n\t\t\t\tsizeValue={sizeValue}\n\t\t\t/>\n\t\t\t{/* <Marks\n\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\tdata={filteredUsage}\n\t\t\t\tprojection={projection}\n\t\t\t\tcolorScale={colorScale}\n\t\t\t\tcolorValue={colorValue}\n\t\t\t/> */}\n\t\t</ZoomContainer>\n\t);\n};\n\nconst Province = ({ d, active, onClick }) => {\n\treturn (\n\t\t<StyledProvincePath\n\t\t\tclassName={active ? 'province active' : 'province'}\n\t\t\td={d}\n\t\t\tonClick={onClick}\n\t\t\ttitle={d.properties}\n\t\t/>\n\t);\n};\n\nconst StyledProvincePath = styled.path`\n\t/* transition-duration: 700ms; */\n\n\t:hover {\n\t\topacity: 0.7;\n\t}\n`;\n\nconst Marks = ({\n\tdata,\n\tprojection,\n\tcolorScale,\n\tcolorValue,\n\tfilteredUsage,\n\tactiveProvince,\n\tselectedUsage,\n\tfadeOpacity,\n\tsizeScale,\n\tsizeValue,\n}) => {\n\treturn (\n\t\t<g className='parking-locations'>\n\t\t\t{data.map((d) => {\n\t\t\t\tconst [x, y] = projection([d.longitude, d.latitude]);\n\n\t\t\t\tconst reduceSizeOnScale = (d) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tactiveProvince &&\n\t\t\t\t\t\tactiveProvince.properties.statnaam === d.province\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn 1.2;\n\t\t\t\t\t} else if (activeProvince) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn sizeScale(sizeValue(d));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tconsole.log(selectedUsage);\n\t\t\t\treturn (\n\t\t\t\t\t<StyledCircle\n\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\tcx={x}\n\t\t\t\t\t\tcy={y}\n\t\t\t\t\t\tr={reduceSizeOnScale(d)}\n\t\t\t\t\t\tfill={colorScale(colorValue(d))}\n\t\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\t\tusage={d.usage}\n\t\t\t\t\t\topacity={\n\t\t\t\t\t\t\tselectedUsage && d.usage !== selectedUsage\n\t\t\t\t\t\t\t\t? fadeOpacity\n\t\t\t\t\t\t\t\t: 0.8\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</g>\n\t);\n};\n\nconst StyledCircle = styled.circle`\n\ttransition-duration: 300ms;\n\t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n\tfill-opacity: 1;\n\t/* stroke: ${(props) => (props.active ? colors.red : colors.blue)}; */\n\t/* stroke-width: 0.5; */\n\tstroke-width: ${(props) => (props.active ? 1 : 3)};\n\t&:hover {\n\t\tfill: ${colors.darkBlue};\n\t}\n`;\n\nexport default DrawMap;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { ZoomContainer } from './ZoomContainer';\nimport { colors, addAlpha } from '../GlobalStyles';\nimport { useSvg } from './SVGContainer';\nimport { geoMercator, geoPath, scaleLinear, max, min, select } from 'd3';\n\nexport const DrawNL = (props) => {\n\tconst gemeentesRef = useRef(null);\n\tconst provincesRef = useRef(null);\n\tconst parkingRef = useRef(null);\n\tconst { size, nld, penr } = props;\n\tconst { gemeente, province, provinceBorder } = nld;\n\tconst { allPenR } = penr;\n\n\t// const provinces = province.features;\n\n\tconst svgElement = useSvg();\n\n\tconst capacityColors = scaleLinear()\n\t\t.domain([1, 1000])\n\t\t.range(['white', 'black']);\n\tconst [activeProvince, setActiveProvince] = useState(null);\n\tconst [activeCity, setActiveCity] = useState(null);\n\tconst [provincesEl, setProvincesEl] = useState(null);\n\t// useEffect(() => props.svg(activeProvince), []);\n\tconst activateProvince = (event, d) => {\n\t\tif (activeProvince === null || activeProvince !== d) {\n\t\t\treturn setActiveProvince(d);\n\t\t}\n\t\tif (activeProvince === d) {\n\t\t\treturn setActiveProvince(null);\n\t\t}\n\t};\n\tconst projection = geoMercator().scale(6000).center([5.55, 52.2]);\n\tconst path = geoPath().projection(projection);\n\tuseEffect(() => {\n\t\tif (!svgElement) return;\n\n\t\tconst svg = select(svgElement);\n\n\t\tconst gemeentes = svg.select('.gemeentes').selectAll('path');\n\t\tconst provinces = svg.select('.provinces').selectAll('path');\n\t\tconst parking = svg.select('.parking-locations').selectAll('circle');\n\n\t\tsetProvincesEl(provinces);\n\n\t\t// const minCap = min(allPenR.capacity);\n\t\t// const maxCap = max(allPenR.capacity);\n\t\tconst capacityColors = scaleLinear()\n\t\t\t.domain([0, 1000])\n\t\t\t.range(['white', 'black']);\n\n\t\t// const setPoints = (d) => {\n\t\t// \tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t// };\n\n\t\tgemeentes\n\t\t\t.data(gemeente.features)\n\t\t\t.enter()\n\t\t\t.append('path')\n\t\t\t.attr('d', path)\n\t\t\t.attr('class', 'gemeente-grens');\n\n\t\tprovinces\n\t\t\t.data(province.features)\n\t\t\t.enter()\n\t\t\t.append('path')\n\t\t\t.attr('d', path)\n\t\t\t.attr('class', 'province')\n\t\t\t.on('click', activateProvince);\n\n\t\tparking\n\t\t\t.data(allPenR)\n\t\t\t.enter()\n\t\t\t.append('circle')\n\t\t\t.attr('r', '1')\n\t\t\t.attr('cx', (d) => projection([d.longitude, d.latitude])[0])\n\t\t\t.attr('cy', (d) => projection([d.longitude, d.latitude])[1]);\n\n\t\t// parking.transition().duration(500).attr('r', '2');\n\t}, [svgElement]);\n\n\treturn (\n\t\t<ZoomContainer\n\t\t\tsize={size}\n\t\t\tsetActiveProvince={setActiveProvince}\n\t\t\tactiveProvince={activeProvince}\n\t\t\tprovinces={provincesEl}\n\t\t\tpath={path}\n\t\t>\n\t\t\t<g className='gemeentes' />\n\t\t\t<g className='provinces' />\n\t\t\t<g className='parking-locations' />\n\t\t</ZoomContainer>\n\t);\n};\n\nconst StyledG = styled.g``;\n\n// const Province = ({ d, isActive, onClick }) => {\n// \treturn (\n// \t\t<StyledProvincePath\n// \t\t\tclassName={isActive ? 'province active' : 'province'}\n// \t\t\td={d}\n// \t\t\tonClick={onClick}\n// \t\t\ttitle={d.properties}\n// \t\t/>\n// \t);\n// };\n\n// const StyledProvincePath = styled.path`\n// \t/* transition-duration: 700ms; */\n\n// \t:hover {\n// \t\topacity: 0.5;\n// \t}\n// `;\n\n// const Circle = ({\n// \tcx,\n// \tcy,\n// \tr,\n// \tdata,\n// \tactiveProvince,\n// \tonMouseEnter,\n// \tactiveCity,\n// \tfill,\n// }) => {\n// \tconst { province, city, capacity } = data;\n\n// \tif (activeProvince && activeProvince.properties.statnaam == province) {\n// \t\tr = r * 1.5;\n// \t}\n\n// \treturn (\n// \t\t<StyledCircle\n// \t\t\tcx={cx}\n// \t\t\tcy={cy}\n// \t\t\tr={r}\n// \t\t\tonClick={onMouseEnter}\n// \t\t\tactive={activeCity}\n// \t\t\tfill={fill}\n// \t\t/>\n// \t);\n// };\n\n// const StyledCircle = styled.circle`\n// \ttransition-duration: 700ms;\n// \t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n// \tfill-opacity: 1;\n// \tstroke: ${(props) => (props.active ? colors.red : colors.blue)};\n// \tstroke-width: 0.5;\n// \t&:hover {\n// \t\tfill: ${colors.darkBlue};\n// \t}\n// `;\n\nexport default DrawNL;\n","import React from 'react';\nimport { StyledCircle } from './StyledComponents';\nexport const Checkbox = (props) => <input type='checkbox' {...props} />;\nexport const Legend = ({\n\tcolorScale,\n\ttickSpacing = 25,\n\ttickSize = 8,\n\ttickTextOffset = 25,\n\tselectUsage,\n\tselectedUsage,\n\tfadeOpacity,\n\tLegendLabel,\n\tclassName,\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{/* <div>\n\t\t\t\t{colorScale.domain().map((domainValue, i) => (\n\t\t\t\t\t<label key={i}>\n\t\t\t\t\t\t<Checkbox value={domainValue} checked />\n\t\t\t\t\t\t<span>{domainValue}</span>\n\t\t\t\t\t</label>\n\t\t\t\t))}\n\t\t\t</div> */}\n\t\t\t{/* <div> */}\n\t\t\t{/* <svg className={className}> */}\n\t\t\t<g transform={`translate(${550 + 60}, 450)`}>\n\t\t\t\t<text x={35} y={-25} className='axis-label' textAnchor='middle'>\n\t\t\t\t\t{LegendLabel}\n\t\t\t\t</text>\n\t\t\t\t{colorScale.domain().map((domainValue, i) => (\n\t\t\t\t\t<g\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tclassName='tick'\n\t\t\t\t\t\ttransform={`translate(0,${i * tickSpacing})`}\n\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t// console.log(domainValue);\n\t\t\t\t\t\t\tselectUsage(domainValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseOut={() => {\n\t\t\t\t\t\t\tselectUsage(null);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StyledCircle\n\t\t\t\t\t\t\tfill={colorScale(domainValue)}\n\t\t\t\t\t\t\tr={tickSize}\n\t\t\t\t\t\t\topacity={\n\t\t\t\t\t\t\t\tselectedUsage && domainValue !== selectedUsage\n\t\t\t\t\t\t\t\t\t? fadeOpacity\n\t\t\t\t\t\t\t\t\t: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<text x={tickTextOffset} dy='.32em'>\n\t\t\t\t\t\t\t{domainValue}\n\t\t\t\t\t\t</text>\n\t\t\t\t\t</g>\n\t\t\t\t))}\n\t\t\t</g>\n\n\t\t\t{/* </svg> */}\n\t\t\t{/* </div> */}\n\t\t</>\n\t);\n};\n\nexport default Legend;\n","import React, { useState, useRef, useEffect } from 'react';\n\nimport { GlobalStyle, colors } from './GlobalStyles.jsx';\nimport { useNLD } from './data/useNLD';\nimport { usePenR } from './data/usePenR';\nimport { useWrld } from './data/useWorld';\n\nimport useWindowSize from './helpers/useWindowSize';\nimport {\n\tuseResizeObserver,\n\tuseObserver,\n} from './helpers/useResizeObservers.js';\n\nimport { SVGContainer } from './components/SVGContainer';\nimport { Loading } from './components/Loading';\nimport { Container } from './components/StyledComponents';\nimport DrawMap from './components/DrawMap';\nimport DrawNL from './components/DrawNL';\n\nimport { geoMercator, geoPath, scaleLinear, max, scaleOrdinal } from 'd3';\nimport Legend from './components/Legend';\n\nconst App = () => {\n\tconst nld = useNLD();\n\tconst penr = usePenR();\n\tconst wrld = useWrld();\n\n\tconst innerContainerRef = useRef(null);\n\t// const dimensions = useObserver(innerContainerRef);\n\tconst [size, setSize] = useState({ width: 800, height: 600 });\n\tconst [selectedUsage, setSelectedUsage] = useState(null);\n\tif (!nld || !penr || !innerContainerRef) {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Loading />\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst colorValue = (d) => d.usage;\n\tconst LegendLabel = 'Gebruik';\n\tconst filteredUsage = penr.filter((d) => selectedUsage === colorValue(d));\n\tconst colorScale = scaleOrdinal()\n\t\t.domain(penr.map(colorValue))\n\t\t.range([colors.darkBlue, colors.darkGray, colors.yellow]);\n\t// const wrapperRef = useRef(null);\n\n\t// useEffect(() => {\n\t// \t// setSize(innerContainerRef.current.getBoundingClientRect());\n\t// \t// if (!innerContainerRef) return;\n\t// \t// const {\n\t// \t// \twidth,\n\t// \t// \theight,\n\t// \t// } = innerContainerRef.current.getBoundingClientRect();\n\t// \t// setSize({ width: width, height: height });\n\t// }, [size]);\n\n\t// const [activeProvince, setActiveProvince] = useState(null);\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Container>\n\t\t\t\t<div ref={innerContainerRef} style={{ marginBottom: '2rem' }}>\n\t\t\t\t\t<SVGContainer className='map' size={size}>\n\t\t\t\t\t\t<DrawMap\n\t\t\t\t\t\t\tsize={size}\n\t\t\t\t\t\t\tnld={nld}\n\t\t\t\t\t\t\tpenr={penr}\n\t\t\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\t\t\tfadeOpacity={0.1}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Legend\n\t\t\t\t\t\t\tclassName='legend'\n\t\t\t\t\t\t\tpenr={penr}\n\t\t\t\t\t\t\tselectUsage={setSelectedUsage}\n\t\t\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\t\t\ttickSpacing={22}\n\t\t\t\t\t\t\ttickSize={10}\n\t\t\t\t\t\t\ttickTextOffset={12}\n\t\t\t\t\t\t\tfadeOpacity={0.1}\n\t\t\t\t\t\t\tLegendLabel={LegendLabel}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* <DrawNL nld={nld} penr={penr} size={size} /> */}\n\n\t\t\t\t\t\t{/* <MapNL/> */}\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t\t<GlobalStyle />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonNLD =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/nl_2020.json';\n\nexport const useNLD = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonNLD).then((topology) => {\n\t\t\tconst { gemeente_2020, provincie_2020 } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tgemeente: feature(topology, gemeente_2020),\n\t\t\t\tprovince: feature(topology, provincie_2020),\n\t\t\t\tprovinceBorder: mesh(\n\t\t\t\t\ttopology,\n\t\t\t\t\tprovincie_2020,\n\t\t\t\t\t(a, b) => a !== b\n\t\t\t\t),\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonWrld = 'https://unpkg.com/world-atlas@2.0.2/countries-10m.json';\n        \n\nexport const useWrld = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonWrld).then(topology => {\n\t\t\tconst { countries, land } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tland: feature(topology, land),\n\t\t\t\tcountries: mesh(topology, countries, (a, b) => a !== b)\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}