{"version":3,"sources":["GlobalStyles.jsx","data/usePenR.jsx","helpers/useResizeObservers.js","components/SVGContainer.jsx","components/Loading.jsx","components/StyledComponents.jsx","components/ZoomContainer.jsx","components/Legend.jsx","components/DrawMap.jsx","components/DrawNL.jsx","App.jsx","data/useNLD.jsx","data/useWorld.jsx","reportWebVitals.js","index.jsx"],"names":["colors","darkBlue","blue","lightBlue","dark","darkGray","midGray","lightGray","light","white","darkGreen","green","lightGreen","orange","darkPurple","purple","red","yellow","px2vw","size","width","GlobalStyle","createGlobalStyle","normalize","cleanParkingData","d","province","replace","id","usage","latitude","longitude","capacity","getRect","element","getBoundingClientRect","bottom","height","left","right","top","Context","createContext","SVGContainer","props","children","className","svgRef","useRef","useState","svg","setSvg","useEffect","current","ref","Provider","value","useSvg","useContext","Loading","StyledLoading","StyledSpinner","viewBox","cx","cy","r","fill","strokeWidth","styled","div","primary","Container","StyledCircle","circle","active","ZoomContainer","path","activeProvince","setActiveProvince","svgElement","x","y","k","setTransform","zoomed","event","transform","select","zoomMap","zoom","scaleExtent","on","currentProvince","node","bounds","x0","y0","x1","y1","selectAll","transition","duration","call","zoomIdentity","translate","scale","Math","min","max","zoomTransform","invert","Legend","colorScale","tickSpacing","tickSize","tickTextOffset","selectUsage","selectedUsage","fadeOpacity","LegendLabel","textAnchor","domain","map","domainValue","i","onMouseEnter","onMouseOut","opacity","dy","sizeValue","Province","onClick","StyledProvincePath","title","properties","Marks","data","projection","colorValue","filteredUsage","sizeScale","statnaam","reduceSizeOnScale","DrawMap","nld","penr","setSize","setSelectedUsage","gemeenteBorder","gemeente","provinceBorder","containerRef","dimensions","rect","setRect","handleResize","useCallback","useLayoutEffect","ResizeObserver","resizeObserver","observe","disconnect","window","addEventListener","removeEventListener","useRect","center","geoCentroid","geoMercator","geoPath","useMemo","scaleSqrt","range","features","activateProvince","g","App","setData","json","then","topology","objects","gemeente_2020","provincie_2020","feature","mesh","a","b","useNLD","dsv","usePenR","countries","land","useWrld","filter","scaleOrdinal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f002a7f.chunk.js","sourcesContent":["import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nexport const colors = {\n\tdarkBlue: '#2F80ED',\n\tblue: '#2D9CDB',\n\tlightBlue: '#B3E5FC',\n\tdark: '#333333',\n\tdarkGray: '#4F4F4F',\n\tmidGray: '#828282',\n\tlightGray: '#BDBDBD',\n\tlight: '#E0E0E0',\n\twhite: '#F2F2F2',\n\tdarkGreen: '#219653',\n\tgreen: '#27AE60',\n\tlightGreen: '#6FCF97',\n\torange: '#F2994A',\n\tdarkPurple: '#9B51E0',\n\tpurple: '#BB6BD9',\n\tred: '#EB5757',\n\tyellow: '#F2C94C',\n};\n\n/**\n * Converts a CSS hex color value to RGBA.\n * @param {string} hex - Expanded hexadecimal CSS color value.\n * @param {number} alpha - Alpha as a decimal.\n * @returns {string} RGBA CSS color value.\n */\nexport const addAlpha = (hex, alpha) => {\n\tconst r = parseInt(hex.substring(1, 3), 16);\n\tconst g = parseInt(hex.substring(3, 5), 16);\n\tconst b = parseInt(hex.substring(5, 7), 16);\n\treturn `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\nexport const px2vw = (size, width = 1440) => `${(size / width) * 100}vw`;\n\nexport const GlobalStyle = createGlobalStyle`\n    ${normalize};\n\n\t* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  html {\n\t\n\t  box-sizing: border-box;\n        overflow-y: scroll;\n\t\t\n  }\n  #root {\n\t  min-width:100vw;\n\t  min-height:100vh;\n  }\n  :root {\n\n\tbody {\n\t\tbackground-color: ${colors.white};\n\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n\t\t'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n\t\t'Helvetica Neue', sans-serif;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n\t${'' /* min-width:100%;\n\tmin-height:100%; */}\n\tmin-width:100vw;\n\t\tmin-height:100vh;\n\t\n\t}\n\tcode {\n\tfont-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n\t\tmonospace;\n}\n\n      font-size: ${px2vw(24)};\n\n      @media (min-width: 768px) {\n        font-size: ${px2vw(24)};\n      }\n\n      @media (min-width: 1024px) {\n        font-size: ${px2vw(24)};\n      }\n    }\n\n\n.App {\n  background-color: ${colors.white};\n  max-width:100vw;\n\tmax-height:100vh;\n  ${'' /* margin: 0 auto; */}\n}\n.viz-wrapper {\n\twidth:100%;\n\theight:100%;\n\tdisplay:flex;\n\tposition:relative;\n\n\t.title {\n\t\tposition: absolute;\n\t\tpadding-left:1em;\n\t}\n}\n\n.province {\n\tstroke-opacity: 0.5;\n\tstroke-width: 1px;\n\t/* stroke: none; */\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n}\n.gemeente {\n\tfill-opacity: 1;\n\t\n\t/* stroke: white; */\n}\n.gemeente-borders{\n\tfill: none;\n\tstroke: ${colors.lightGreen};\n\tstroke-width: 1;\n\tstroke-linejoin: round;\n\t${'' /* stroke-linecap: round; */}\n\tpointer-events: none;\n}\n.provinces {\n\tfill: ${colors.lightGreen};\n\tstroke: ${colors.white};\n\ttransition: 0.3s;\n}\n\n.provinces .active {\n\topacity: .8;\n\ttransition: visibility 0s, opacity 0.5s linear;\n}\n\n.province-borders {\n\tfill: none;\n\tstroke: var(--white);\n\tstroke-width: 1;\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n\tpointer-events: none;\n}\n\n.gemeente-grens {\n\tstroke-linejoin: round;\n\tstroke-linecap: round;\n\tstroke: ${colors.green};\n\tstroke-opacity: 1;\n\t/* stroke-width: 0.1em; */\n\t/* transition-duration: 0.5s; */\n\tfill: ${colors.lightGreen};\n}\n\n    `;\n\nexport default GlobalStyle;\n","import { useState, useEffect } from 'react';\nimport { csv, group, dsv } from 'd3';\n\nconst csvPenR =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/OpenParkingPenR.csv';\n\nconst csvParking =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/55947d8316f6ab6cf5aa564229e5461d9414bf5b/openParking.csv';\n\nconst parkeerData =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/5f69fabb70e85ae64cf19633aadd38fcf26a75a4/parkeerData.csv';\n\nconst ssv = '';\n\nconst row = (d) => {\n\td.latitude = +d.latitude;\n\td.longitude = +d.longitude;\n\td.capacity = +d.capacity;\n\treturn d;\n};\n\n// export const usePenR = () => {\n// \tconst [data, setData] = useState(null);\n// \tuseEffect(() => {\n// \t\tcsv(csvParking, cleanPenR).then((data) => {\n// \t\t\tconst byProvince = group(data, (d) => d.province);\n// \t\t\tconst byCity = group(data, (d) => d.city);\n// \t\t\tsetData({\n// \t\t\t\tbyProvince: byProvince,\n// \t\t\t\tbyCity: byCity,\n// \t\t\t\tallPenR: data,\n// \t\t\t});\n// \t\t});\n// \t}, []);\n// \treturn data;\n// };\n\nconst cleanParkingData = (d) => {\n\td.province = d.province.replace('Fryslân', 'Friesland');\n\td.id = +d.id;\n\td.usage = d.usage\n\t\t.replace('park and ride', 'P+R Parkeerplaats')\n\t\t.replace('garage', 'Parkeergarage')\n\t\t.replace('terrain', 'Parkeerterrein');\n\td.latitude = +d.latitude;\n\td.longitude = +d.longitude;\n\td.capacity = +d.capacity;\n\t// console.log(d);\n\n\treturn d;\n};\nexport const usePenR = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\t// csv(csvParking, cleanParkingData).then(setData);\n\t\tdsv(';', parkeerData, cleanParkingData).then(setData);\n\t}, []);\n\treturn data;\n};\n","import {\n\tuseEffect,\n\tuseState,\n\tuseRef,\n\tuseLayoutEffect,\n\tuseCallback,\n} from 'react';\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\n// export const useResizeObserver = (ref) => {\n// \tconst [dimensions, setDimensions] = useState(null);\n// \tuseEffect(() => {\n// \t\tconst observeTarget = ref;\n// \t\tconst ro = new ResizeObserver((entries, observer) => {\n// \t\t\tfor (const entry of entries) {\n// \t\t\t\tconst { width, height } = entry.contentRect;\n// \t\t\t\tconsole.log('Element:', entry.target);\n// \t\t\t\tsetDimensions(entry.contentRect);\n// \t\t\t}\n// \t\t});\n// \t\tro.observe(observeTarget.current);\n// \t}, [ref.current]);\n// \treturn dimensions;\n// };\n\n// export const useResizeObserver;\n\n// export const useObserver = ({ callback, element }) => {\n// \tconst current = element && element.current;\n\n// \tconst observer = useRef(null);\n\n// \tuseEffect(() => {\n// \t\t// if we are already observing old element\n// \t\tif (observer && observer.current && current) {\n// \t\t\tobserver.current.unobserve(current);\n// \t\t}\n// \t\tconst resizeObserverOrPolyfill = ResizeObserver;\n// \t\tobserver.current = new resizeObserverOrPolyfill(callback);\n// \t\tobserve();\n\n// \t\treturn () => {\n// \t\t\tif (observer && observer.current && element && element.current) {\n// \t\t\t\tobserver.current.unobserve(element.current);\n// \t\t\t}\n// \t\t};\n// \t}, [current]);\n\n// \tconst observe = () => {\n// \t\tif (element && element.current && observer.current) {\n// \t\t\tobserver.current.observe(element.current);\n// \t\t}\n// \t};\n// };\n\nexport const useRect = (ref) => {\n\tconst [rect, setRect] = useState(getRect(ref ? ref.current : null));\n\n\tconst handleResize = useCallback(() => {\n\t\tif (!ref.current) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update client rect\n\t\tsetRect(getRect(ref.current));\n\t}, [ref]);\n\n\tuseLayoutEffect(() => {\n\t\tconst element = ref.current;\n\t\tif (!element) {\n\t\t\treturn;\n\t\t}\n\n\t\thandleResize();\n\n\t\tif (typeof ResizeObserver === 'function') {\n\t\t\tlet resizeObserver = new ResizeObserver(() => handleResize());\n\t\t\tresizeObserver.observe(element);\n\n\t\t\treturn () => {\n\t\t\t\tif (!resizeObserver) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresizeObserver.disconnect();\n\t\t\t\tresizeObserver = null;\n\t\t\t};\n\t\t} else {\n\t\t\t// Browser support, remove freely\n\t\t\twindow.addEventListener('resize', handleResize);\n\n\t\t\treturn () => {\n\t\t\t\twindow.removeEventListener('resize', handleResize);\n\t\t\t};\n\t\t}\n\t}, [ref, handleResize]);\n\n\treturn rect;\n};\n\nfunction getRect(element) {\n\tif (!element) {\n\t\treturn {\n\t\t\tbottom: 0,\n\t\t\theight: 0,\n\t\t\tleft: 0,\n\t\t\tright: 0,\n\t\t\ttop: 0,\n\t\t\twidth: 0,\n\t\t};\n\t}\n\n\treturn element.getBoundingClientRect();\n}\n\nexport const useBbox = () => {\n\tconst ref = useRef();\n\tconst [bbox, setBbox] = useState({});\n\n\tconst set = () =>\n\t\tsetBbox(ref && ref.current ? ref.current.getBoundingClientRect() : {});\n\n\tuseEffect(() => {\n\t\tset();\n\t\twindow.addEventListener('resize', set);\n\t\treturn () => window.removeEventListener('resize', set);\n\t}, []);\n\n\treturn [bbox, ref];\n};\n","import React, {\n\tuseEffect,\n\tuseRef,\n\tuseState,\n\tcreateContext,\n\tuseContext,\n} from 'react';\n\nconst Context = createContext(null);\n\nexport const SVGContainer = (props) => {\n\tconst { size, children, className } = props;\n\tif (!size) return;\n\tconst { width, height } = size;\n\tconst svgRef = useRef(null);\n\tconst [svg, setSvg] = useState(null);\n\tuseEffect(() => setSvg(svgRef.current), []);\n\treturn (\n\t\t<svg\n\t\t\tclassName={className}\n\t\t\tref={svgRef}\n\t\t\t// viewBox={`0 0 ${'800'} ${'800'}`}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t>\n\t\t\t<Context.Provider value={svg}>{children}</Context.Provider>\n\t\t</svg>\n\t);\n};\n\nexport function useSvg() {\n\treturn useContext(Context);\n}\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { colors } from '../GlobalStyles';\nexport const Loading = () => (\n\t<StyledLoading>\n\t\t<StyledSpinner viewBox='0 0 50 50'>\n\t\t\t<circle\n\t\t\t\tclassName='path'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='4'\n\t\t\t/>\n\t\t\t<circle\n\t\t\t\tclassName='path'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='4'\n\t\t\t/>\n\t\t\t<circle\n\t\t\t\tclassName='path'\n\t\t\t\tcx='25'\n\t\t\t\tcy='25'\n\t\t\t\tr='20'\n\t\t\t\tfill='none'\n\t\t\t\tstrokeWidth='4'\n\t\t\t/>\n\t\t</StyledSpinner>\n\t</StyledLoading>\n);\n\nexport const StyledSpinner = styled.svg`\n\tanimation: rotate 2s linear infinite;\n\tmargin: -25px 0 0 -25px;\n\twidth: 50px;\n\theight: 50px;\n\n\t& .path {\n\t\tstroke: ${colors.green};\n\t\tstroke-linecap: round;\n\t\tanimation: dash 1.5s ease-in-out infinite;\n\t}\n\n\t@keyframes rotate {\n\t\t100% {\n\t\t\ttransform: rotate(360deg);\n\t\t}\n\t}\n\n\t@keyframes dash {\n\t\t0% {\n\t\t\tstroke-dasharray: 1, 150;\n\t\t\tstroke-dashoffset: 0;\n\t\t}\n\t\t50% {\n\t\t\tstroke-dasharray: 90, 150;\n\t\t\tstroke-dashoffset: -35;\n\t\t}\n\t\t100% {\n\t\t\tstroke-dasharray: 90, 150;\n\t\t\tstroke-dashoffset: -124;\n\t\t}\n\t}\n`;\n\nconst StyledLoading = styled.div`\n\theight: 100vh;\n\twidth: 100vw;\n\tbackground: ${colors.primary};\n\tz-index: 4;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { px2vw, colors } from '../GlobalStyles';\nexport const Container = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n\tpadding-top: ${px2vw(32)};\n\tpadding-left: ${px2vw(32)};\n\tpadding-right: ${px2vw(32)};\n\tpadding-bottom: ${px2vw(32)};\n\tmax-width: 100%;\n\tmin-height: 100%;\n\n\theight: 100vh;\n\t.map {\n\t\tborder: 1px solid red;\n\t}\n\t.legend {\n\t\tposition: absolute;\n\n\t\tbottom: 0;\n\t\tleft: 10px;\n\t}\n`;\n\nexport const StyledCircle = styled.circle`\n\ttransition-duration: 100ms;\n\t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n\tfill-opacity: 1;\n\t/* stroke: ${(props) => (props.active ? props.fill : colors.blue)}; */\n\tstroke-width: 1;\n\t/* stroke-width: ${(props) => (props.active ? 1 : 3)}; */\n\t/* stroke: ${(props) => props.fill}; */\n\t&:hover {\n\t\t/* stroke: ${(props) => colors.red}; */\n\t}\n`;\n","import {\n\tselect,\n\tzoom,\n\tgeoPath,\n\tselection,\n\tselectAll,\n\tzoomIdentity,\n\tpointer,\n\tzoomTransform,\n} from 'd3';\nimport React, { useState, useEffect } from 'react';\nimport { useSvg } from './SVGContainer';\n\nexport const ZoomContainer = (props) => {\n\tconst { children, path, activeProvince, setActiveProvince, size } = props;\n\n\tconst svgElement = useSvg();\n\n\tconst [{ x, y, k }, setTransform] = useState({ x: 0, y: 0, k: 1 });\n\tconst zoomed = (event) => {\n\t\tconst { transform } = event;\n\t\tsetTransform(transform);\n\t};\n\n\tuseEffect(() => {\n\t\tif (!svgElement || !size) return;\n\t\tconst svg = select(svgElement);\n\t\t// const width = svg.attr('width');\n\t\t// const height = svg.attr('height');\n\t\tconst { width, height } = size;\n\n\t\tconst zoomMap = zoom().scaleExtent([1, 8]).on('zoom', zoomed);\n\n\t\tconst reset = () => {\n\t\t\tsvg.transition()\n\t\t\t\t.duration(750)\n\t\t\t\t.call(\n\t\t\t\t\tzoomMap.transform,\n\t\t\t\t\tzoomIdentity,\n\t\t\t\t\tzoomTransform(svg.node()).invert([width / 2, height / 2])\n\t\t\t\t);\n\t\t\tsetActiveProvince(null);\n\t\t};\n\t\tconst currentProvince = select(activeProvince).node();\n\n\t\tif (activeProvince) {\n\t\t\tconst [[x0, y0], [x1, y1]] = path.bounds(currentProvince);\n\t\t\tsvg.selectAll('path');\n\t\t\tsvg.transition()\n\t\t\t\t.duration(750)\n\t\t\t\t.call(\n\t\t\t\t\tzoomMap.transform,\n\t\t\t\t\tzoomIdentity\n\t\t\t\t\t\t.translate(width / 2, height / 2)\n\t\t\t\t\t\t.scale(\n\t\t\t\t\t\t\tMath.min(\n\t\t\t\t\t\t\t\t8,\n\t\t\t\t\t\t\t\t0.9 /\n\t\t\t\t\t\t\t\t\tMath.max(\n\t\t\t\t\t\t\t\t\t\t(x1 - x0) / width,\n\t\t\t\t\t\t\t\t\t\t(y1 - y0) / height\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.translate(-(x0 + x1) / 2, -(y0 + y1) / 2)\n\t\t\t\t);\n\t\t} else {\n\t\t\treset();\n\t\t}\n\n\t\tsvg.call(zoomMap);\n\t\treturn;\n\t}, [svgElement, activeProvince]);\n\n\treturn (\n\t\t<g transform={`translate(${x}, ${y}) scale(${k})`} strokeWidth={1 / k}>\n\t\t\t{children}\n\t\t</g>\n\t);\n};\n","import React from 'react';\nimport { StyledCircle } from './StyledComponents';\nexport const Checkbox = (props) => <input type='checkbox' {...props} />;\nexport const Legend = ({\n\tcolorScale,\n\ttickSpacing = 25,\n\ttickSize = 8,\n\ttickTextOffset = 25,\n\tselectUsage,\n\tselectedUsage,\n\tfadeOpacity,\n\tLegendLabel,\n\tclassName,\n}) => {\n\treturn (\n\t\t<>\n\t\t\t{/* <div>\n\t\t\t\t{colorScale.domain().map((domainValue, i) => (\n\t\t\t\t\t<label key={i}>\n\t\t\t\t\t\t<Checkbox value={domainValue} checked />\n\t\t\t\t\t\t<span>{domainValue}</span>\n\t\t\t\t\t</label>\n\t\t\t\t))}\n\t\t\t</div> */}\n\t\t\t{/* <div> */}\n\t\t\t{/* <svg className={className}> */}\n\t\t\t<g transform={`translate(${30}, 500)`}>\n\t\t\t\t<text x={35} y={-25} className='axis-label' textAnchor='middle'>\n\t\t\t\t\t{LegendLabel}\n\t\t\t\t</text>\n\t\t\t\t{colorScale.domain().map((domainValue, i) => (\n\t\t\t\t\t<g\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tclassName='tick'\n\t\t\t\t\t\ttransform={`translate(0,${i * tickSpacing})`}\n\t\t\t\t\t\tonMouseEnter={() => {\n\t\t\t\t\t\t\t// console.log(domainValue);\n\t\t\t\t\t\t\tselectUsage(domainValue);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonMouseOut={() => {\n\t\t\t\t\t\t\tselectUsage(null);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<StyledCircle\n\t\t\t\t\t\t\tfill={colorScale(domainValue)}\n\t\t\t\t\t\t\tr={tickSize}\n\t\t\t\t\t\t\topacity={\n\t\t\t\t\t\t\t\tselectedUsage && domainValue !== selectedUsage\n\t\t\t\t\t\t\t\t\t? fadeOpacity\n\t\t\t\t\t\t\t\t\t: 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<text x={tickTextOffset} dy='.32em'>\n\t\t\t\t\t\t\t{domainValue}\n\t\t\t\t\t\t</text>\n\t\t\t\t\t</g>\n\t\t\t\t))}\n\t\t\t</g>\n\n\t\t\t{/* </svg> */}\n\t\t\t{/* </div> */}\n\t\t</>\n\t);\n};\n\nexport default Legend;\n","import React, { useRef, useState, useEffect, forwardRef, useMemo } from 'react';\nimport styled from 'styled-components';\nimport useDimensions from 'react-cool-dimensions';\nimport { ZoomContainer } from './ZoomContainer';\nimport { SVGContainer } from './SVGContainer';\nimport { colors, addAlpha } from '../GlobalStyles';\nimport { useRect, useBbox } from '../helpers/useResizeObservers';\nimport Legend from './Legend';\nimport {\n\tgeoMercator,\n\tgeoPath,\n\tscaleLinear,\n\tmax,\n\tscaleSqrt,\n\tgeoCentroid,\n} from 'd3';\n\nconst sizeValue = (d) => d.capacity;\nconst maxRadius = 10;\nexport const DrawMap = (props) => {\n\tconst {\n\t\tnld,\n\t\tpenr,\n\t\tsize,\n\t\tsetSize,\n\t\tfilteredUsage,\n\t\tcolorScale,\n\t\tcolorValue,\n\t\tselectedUsage,\n\t\tfadeOpacity,\n\t\tchildren,\n\t\tactiveProvince,\n\t\tsetActiveProvince,\n\t\tsetSelectedUsage,\n\t} = props;\n\tconst { gemeente, gemeenteBorder, province, provinceBorder } = nld;\n\tconst [activeCity, setActiveCity] = useState(null);\n\tconst containerRef = useRef();\n\tconst dimensions = useRect(containerRef);\n\tconst { width, height } = dimensions;\n\n\tconst center = geoCentroid(provinceBorder);\n\tconst projection = geoMercator()\n\t\t.translate([width / 2, height / 2])\n\t\t.scale(6000)\n\t\t.center(center);\n\tconst path = geoPath().projection(projection);\n\tconst LegendLabel = 'Gebruik';\n\n\tconst sizeScale = useMemo(\n\t\t() =>\n\t\t\tscaleSqrt()\n\t\t\t\t.domain([0, max(penr, sizeValue)])\n\t\t\t\t.range([0, maxRadius]),\n\t\t[nld, penr, sizeValue, maxRadius]\n\t);\n\n\tconst activateProvince = (d) => {\n\t\tif (activeProvince === null || activeProvince !== d)\n\t\t\treturn setActiveProvince(d);\n\t\tif (activeProvince === d) {\n\t\t\treturn setActiveProvince(null);\n\t\t}\n\t};\n\n\tconst activateCity = (d) => {\n\t\tif (activeCity === null || activeCity !== d.city) {\n\t\t\treturn setActiveCity(d.city);\n\t\t}\n\t\tif (activeCity === d.city) {\n\t\t\treturn setActiveCity(null);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tif (!dimensions) return;\n\t}, [dimensions]);\n\n\treturn (\n\t\t<div className='viz-wrapper' ref={containerRef}>\n\t\t\t<SVGContainer className='map' size={dimensions}>\n\t\t\t\t<ZoomContainer\n\t\t\t\t\tsetActiveProvince={setActiveProvince}\n\t\t\t\t\tactiveProvince={activeProvince}\n\t\t\t\t\tpath={path}\n\t\t\t\t\tsize={dimensions}\n\t\t\t\t>\n\t\t\t\t\t{useMemo(\n\t\t\t\t\t\t() => (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{/* <g className='gemeentes'>\n\t\t\t\t\t{gemeente.features.map((d) => (\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\t\tclassName='gemeente-grens'\n\t\t\t\t\t\t\td={path(d)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</g> */}\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tclassName='gemeente-borders'\n\t\t\t\t\t\t\t\t\td={path(gemeenteBorder)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<g className='provinces'>\n\t\t\t\t\t\t\t\t\t{province.features.map((d) => (\n\t\t\t\t\t\t\t\t\t\t<Province\n\t\t\t\t\t\t\t\t\t\t\tdata={d}\n\t\t\t\t\t\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\t\t\t\t\t\td={path(d)}\n\t\t\t\t\t\t\t\t\t\t\ttitle={d.properties.statnaam}\n\t\t\t\t\t\t\t\t\t\t\tactive={activeProvince === d}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => activateProvince(d)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</g>\n\n\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\tclassName='province-borders'\n\t\t\t\t\t\t\t\t\td={path(provinceBorder)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t),\n\t\t\t\t\t\t[path, province, provinceBorder, gemeenteBorder]\n\t\t\t\t\t)}\n\t\t\t\t\t<Marks\n\t\t\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\t\t\tdata={penr}\n\t\t\t\t\t\tprojection={projection}\n\t\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\t\tactiveProvince={activeProvince}\n\t\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\t\tfadeOpacity={fadeOpacity}\n\t\t\t\t\t\tsizeScale={sizeScale}\n\t\t\t\t\t\tsizeValue={sizeValue}\n\t\t\t\t\t/>\n\t\t\t\t\t{/* <Marks\n\t\t\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\t\t\tdata={filteredUsage}\n\t\t\t\t\t\tprojection={projection}\n\t\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\t\tsizeValue={sizeValue}\n\t\t\t\t\t\tsizeScale={sizeScale}\n\t\t\t\t\t/> */}\n\t\t\t\t</ZoomContainer>\n\t\t\t\t<Legend\n\t\t\t\t\tclassName='legend'\n\t\t\t\t\tpenr={penr}\n\t\t\t\t\tselectUsage={setSelectedUsage}\n\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\ttickSpacing={22}\n\t\t\t\t\ttickSize={10}\n\t\t\t\t\ttickTextOffset={12}\n\t\t\t\t\tfadeOpacity={0.2}\n\t\t\t\t\tLegendLabel={LegendLabel}\n\t\t\t\t\tdimensions={dimensions}\n\t\t\t\t/>\n\t\t\t</SVGContainer>\n\t\t\t{children}\n\t\t</div>\n\t);\n};\n\nconst Province = ({ d, active, onClick }) => {\n\treturn (\n\t\t<StyledProvincePath\n\t\t\tclassName={active ? 'province active' : 'province'}\n\t\t\td={d}\n\t\t\tonClick={onClick}\n\t\t\ttitle={d.properties}\n\t\t/>\n\t);\n};\n\nconst StyledProvincePath = styled.path`\n\t/* transition-duration: 700ms; */\n\n\t:hover {\n\t\topacity: 0.7;\n\t}\n`;\n\nconst Marks = ({\n\tdata,\n\tprojection,\n\tcolorScale,\n\tcolorValue,\n\tfilteredUsage,\n\tactiveProvince,\n\tselectedUsage,\n\tfadeOpacity,\n\tsizeScale,\n\tsizeValue,\n}) => {\n\treturn (\n\t\t<g className='parking-locations'>\n\t\t\t{data.map((d) => {\n\t\t\t\tconst [x, y] = projection([d.longitude, d.latitude]);\n\n\t\t\t\tconst reduceSizeOnScale = (d) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tactiveProvince &&\n\t\t\t\t\t\tactiveProvince.properties.statnaam === d.province\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn 1.2;\n\t\t\t\t\t} else if (activeProvince) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn sizeScale(sizeValue(d));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t{\n\t\t\t\t\t/* console.log(selectedUsage); */\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<StyledCircle\n\t\t\t\t\t\tkey={d.id}\n\t\t\t\t\t\tcx={x}\n\t\t\t\t\t\tcy={y}\n\t\t\t\t\t\tr={reduceSizeOnScale(d)}\n\t\t\t\t\t\tfill={colorScale(colorValue(d))}\n\t\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\t\tusage={d.usage}\n\t\t\t\t\t\topacity={\n\t\t\t\t\t\t\tselectedUsage && d.usage !== selectedUsage\n\t\t\t\t\t\t\t\t? fadeOpacity\n\t\t\t\t\t\t\t\t: 0.8\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</g>\n\t);\n};\n\nconst StyledCircle = styled.circle`\n\ttransition-duration: 300ms;\n\t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n\tfill-opacity: 1;\n\t/* stroke: ${(props) => (props.active ? colors.red : colors.blue)}; */\n\t/* stroke-width: 0.5; */\n\tstroke-width: ${(props) => (props.active ? 1 : 3)};\n\t&:hover {\n\t\tfill: ${colors.darkBlue};\n\t}\n`;\n\nexport default DrawMap;\n","import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { ZoomContainer } from './ZoomContainer';\nimport { colors, addAlpha } from '../GlobalStyles';\nimport { useSvg } from './SVGContainer';\nimport { geoMercator, geoPath, scaleLinear, max, min, select } from 'd3';\n\nexport const DrawNL = (props) => {\n\tconst gemeentesRef = useRef(null);\n\tconst provincesRef = useRef(null);\n\tconst parkingRef = useRef(null);\n\tconst { size, nld, penr } = props;\n\tconst { gemeente, province, provinceBorder } = nld;\n\tconst { allPenR } = penr;\n\n\t// const provinces = province.features;\n\n\tconst svgElement = useSvg();\n\n\tconst capacityColors = scaleLinear()\n\t\t.domain([1, 1000])\n\t\t.range(['white', 'black']);\n\tconst [activeProvince, setActiveProvince] = useState(null);\n\tconst [activeCity, setActiveCity] = useState(null);\n\tconst [provincesEl, setProvincesEl] = useState(null);\n\t// useEffect(() => props.svg(activeProvince), []);\n\tconst activateProvince = (event, d) => {\n\t\tif (activeProvince === null || activeProvince !== d) {\n\t\t\treturn setActiveProvince(d);\n\t\t}\n\t\tif (activeProvince === d) {\n\t\t\treturn setActiveProvince(null);\n\t\t}\n\t};\n\tconst projection = geoMercator().scale(6000).center([5.55, 52.2]);\n\tconst path = geoPath().projection(projection);\n\tuseEffect(() => {\n\t\tif (!svgElement) return;\n\n\t\tconst svg = select(svgElement);\n\n\t\tconst gemeentes = svg.select('.gemeentes').selectAll('path');\n\t\tconst provinces = svg.select('.provinces').selectAll('path');\n\t\tconst parking = svg.select('.parking-locations').selectAll('circle');\n\n\t\tsetProvincesEl(provinces);\n\n\t\t// const minCap = min(allPenR.capacity);\n\t\t// const maxCap = max(allPenR.capacity);\n\t\tconst capacityColors = scaleLinear()\n\t\t\t.domain([0, 1000])\n\t\t\t.range(['white', 'black']);\n\n\t\t// const setPoints = (d) => {\n\t\t// \tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t// };\n\n\t\tgemeentes\n\t\t\t.data(gemeente.features)\n\t\t\t.enter()\n\t\t\t.append('path')\n\t\t\t.attr('d', path)\n\t\t\t.attr('class', 'gemeente-grens');\n\n\t\tprovinces\n\t\t\t.data(province.features)\n\t\t\t.enter()\n\t\t\t.append('path')\n\t\t\t.attr('d', path)\n\t\t\t.attr('class', 'province')\n\t\t\t.on('click', activateProvince);\n\n\t\tparking\n\t\t\t.data(allPenR)\n\t\t\t.enter()\n\t\t\t.append('circle')\n\t\t\t.attr('r', '1')\n\t\t\t.attr('cx', (d) => projection([d.longitude, d.latitude])[0])\n\t\t\t.attr('cy', (d) => projection([d.longitude, d.latitude])[1]);\n\n\t\t// parking.transition().duration(500).attr('r', '2');\n\t}, [svgElement]);\n\n\treturn (\n\t\t<ZoomContainer\n\t\t\tsize={size}\n\t\t\tsetActiveProvince={setActiveProvince}\n\t\t\tactiveProvince={activeProvince}\n\t\t\tprovinces={provincesEl}\n\t\t\tpath={path}\n\t\t>\n\t\t\t<g className='gemeentes' />\n\t\t\t<g className='provinces' />\n\t\t\t<g className='parking-locations' />\n\t\t</ZoomContainer>\n\t);\n};\n\nconst StyledG = styled.g``;\n\n// const Province = ({ d, isActive, onClick }) => {\n// \treturn (\n// \t\t<StyledProvincePath\n// \t\t\tclassName={isActive ? 'province active' : 'province'}\n// \t\t\td={d}\n// \t\t\tonClick={onClick}\n// \t\t\ttitle={d.properties}\n// \t\t/>\n// \t);\n// };\n\n// const StyledProvincePath = styled.path`\n// \t/* transition-duration: 700ms; */\n\n// \t:hover {\n// \t\topacity: 0.5;\n// \t}\n// `;\n\n// const Circle = ({\n// \tcx,\n// \tcy,\n// \tr,\n// \tdata,\n// \tactiveProvince,\n// \tonMouseEnter,\n// \tactiveCity,\n// \tfill,\n// }) => {\n// \tconst { province, city, capacity } = data;\n\n// \tif (activeProvince && activeProvince.properties.statnaam == province) {\n// \t\tr = r * 1.5;\n// \t}\n\n// \treturn (\n// \t\t<StyledCircle\n// \t\t\tcx={cx}\n// \t\t\tcy={cy}\n// \t\t\tr={r}\n// \t\t\tonClick={onMouseEnter}\n// \t\t\tactive={activeCity}\n// \t\t\tfill={fill}\n// \t\t/>\n// \t);\n// };\n\n// const StyledCircle = styled.circle`\n// \ttransition-duration: 700ms;\n// \t/* fill: ${(props) => (props.active ? colors.blue : colors.blue)}; */\n// \tfill-opacity: 1;\n// \tstroke: ${(props) => (props.active ? colors.red : colors.blue)};\n// \tstroke-width: 0.5;\n// \t&:hover {\n// \t\tfill: ${colors.darkBlue};\n// \t}\n// `;\n\nexport default DrawNL;\n","import React, { useState, useRef, useEffect } from 'react';\nimport useDimensions from 'react-cool-dimensions';\nimport { GlobalStyle, colors, px2vw } from './GlobalStyles.jsx';\nimport { useNLD } from './data/useNLD';\nimport { usePenR } from './data/usePenR';\nimport { useWrld } from './data/useWorld';\n\nimport useWindowSize from './helpers/useWindowSize';\nimport {\n\tuseResizeObserver,\n\tuseObserver,\n\tuseRect,\n\tuseBbox,\n} from './helpers/useResizeObservers.js';\n\nimport { SVGContainer } from './components/SVGContainer';\nimport { Loading } from './components/Loading';\nimport { Container } from './components/StyledComponents';\nimport DrawMap from './components/DrawMap';\nimport DrawNL from './components/DrawNL';\n\nimport { geoMercator, geoPath, scaleLinear, max, scaleOrdinal } from 'd3';\n\nconst App = () => {\n\tconst nld = useNLD();\n\tconst penr = usePenR();\n\tconst wrld = useWrld();\n\n\tconst [selectedUsage, setSelectedUsage] = useState(null);\n\tconst [activeProvince, setActiveProvince] = useState(null);\n\tif (!nld || !penr) {\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<Loading />\n\t\t\t</div>\n\t\t);\n\t}\n\n\t// const [container, setContainer] = useState(null);\n\n\tconst colorValue = (d) => d.usage;\n\n\tconst filteredUsage = penr.filter((d) => selectedUsage === colorValue(d));\n\tconst colorScale = scaleOrdinal()\n\t\t.domain(penr.map(colorValue))\n\t\t.range([colors.darkBlue, colors.darkGray, colors.yellow]);\n\n\t// useEffect(() => {\n\t// \t// setSelectedUsage(penr.map(d) => d.usage)\n\t// \t// if (containerRef.current) {\n\t// \t// \tconsole.log(containerRef);\n\t// \t// }\n\t// \t// setContainer(containerRef.current);\n\t// \t// const { containerRef } = useDimensions({\n\t// \t// \tonResize: ({ width, height }) => {\n\t// \t// \t\t// Triggered whenever the size of the target is changed\n\t// \t// \t\tsetSize({ width: width, height: height });\n\t// \t// \t},\n\t// \t// });\n\t// }, []);\n\n\treturn (\n\t\t<>\n\t\t\t<Container>\n\t\t\t\t<DrawMap\n\t\t\t\t\tnld={nld}\n\t\t\t\t\tpenr={penr}\n\t\t\t\t\tselectedUsage={selectedUsage}\n\t\t\t\t\tfilteredUsage={filteredUsage}\n\t\t\t\t\tcolorScale={colorScale}\n\t\t\t\t\tcolorValue={colorValue}\n\t\t\t\t\tfadeOpacity={0.2}\n\t\t\t\t\tsetActiveProvince={setActiveProvince}\n\t\t\t\t\tactiveProvince={activeProvince}\n\t\t\t\t\tsetSelectedUsage={setSelectedUsage}\n\t\t\t\t>\n\t\t\t\t\t<h1 className='title'>\n\t\t\t\t\t\tParkeer plaatsen van Nederland{' '}\n\t\t\t\t\t\t{activeProvince\n\t\t\t\t\t\t\t? `in ${activeProvince.properties.statnaam}`\n\t\t\t\t\t\t\t: ''}\n\t\t\t\t\t</h1>\n\t\t\t\t</DrawMap>\n\t\t\t\t{/* <DrawNL nld={nld} penr={penr} size={size} /> */}\n\n\t\t\t\t{/* <MapNL/> */}\n\t\t\t</Container>\n\t\t\t<GlobalStyle />\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonNLD =\n\t'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/nl_2020.json';\n\nexport const useNLD = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonNLD).then((topology) => {\n\t\t\tconst { gemeente_2020, provincie_2020 } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tgemeente: feature(topology, gemeente_2020),\n\t\t\t\tgemeenteBorder: mesh(\n\t\t\t\t\ttopology,\n\t\t\t\t\tgemeente_2020,\n\t\t\t\t\t(a, b) => a !== b\n\t\t\t\t),\n\t\t\t\tprovince: feature(topology, provincie_2020),\n\t\t\t\tprovinceBorder: mesh(\n\t\t\t\t\ttopology,\n\t\t\t\t\tprovincie_2020,\n\t\t\t\t\t(a, b) => a !== b\n\t\t\t\t),\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\nconst jsonWrld = 'https://unpkg.com/world-atlas@2.0.2/countries-10m.json';\n        \n\nexport const useWrld = () => {\n\tconst [data, setData] = useState(null);\n\tuseEffect(() => {\n\t\tjson(jsonWrld).then(topology => {\n\t\t\tconst { countries, land } = topology.objects;\n\t\t\tsetData({\n\t\t\t\tland: feature(topology, land),\n\t\t\t\tcountries: mesh(topology, countries, (a, b) => a !== b)\n\t\t\t});\n\t\t});\n\t}, []);\n\treturn data;\n};","const reportWebVitals = (onPerfEntry) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}