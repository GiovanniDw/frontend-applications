{"version":3,"sources":["GlobalStyle.js","components/SVGContainer.jsx","components/DrawMap.jsx","components/ZoomContainer.jsx","App.jsx","data/useNLD.jsx","data/usePenR.jsx","reportWebVitals.js","index.jsx"],"names":["colors","GlobalStyle","createGlobalStyle","normalize","Context","createContext","SVGContainer","children","width","height","svgRef","useRef","useState","svg","setSvg","useEffect","current","ref","Provider","value","projection","geoMercator","scale","center","path","geoPath","DrawMap","nld","penr","gemeente","province","provinceBorder","allPenR","byProvince","byCity","className","id","features","map","d","longitude","latitude","x","y","Circle","cx","cy","r","capacity","styled","circle","ZoomContainer","svgElement","useContext","k","setTransform","zoomed","event","transform","selection","select","zoomMap","zoom","on","call","App","data","setData","json","then","topology","objects","gemeente_2020","provincie_2020","feature","mesh","a","b","console","log","useNLD","csv","group","city","usePenR","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e2374b1.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\nexport const colors = {\n\tdarkBlue: '#2F80ED',\n\tblue: '#2D9CDB',\n\tlightBlue: '#B3E5FC',\n\tdark: '#333333',\n\tdarkGray: '#4F4F4F',\n\tmidGray: '#828282',\n\tlightGray: '#BDBDBD',\n\tlight: '#E0E0E0',\n\twhite: '#F2F2F2',\n\tdarkGreen: '#219653',\n\tgreen: '#27AE60',\n\tlightGreen: '#6FCF97',\n\torange: '#F2994A',\n\tdarkPurple: '#9B51E0',\n\tpurple: '#BB6BD9',\n\tred: '#EB5757',\n\tyellow: '#F2C94C',\n};\n\n\nconst GlobalStyle = createGlobalStyle`\n    ${normalize};\n.App {\n  background-color: ${colors.lightBlue};\n  width: 100%;\n  height: 100%;\n}\n    `;\n\nexport default GlobalStyle;","import React, {useEffect, useRef, useState, createContext, useContext} from 'react';\n\nconst Context = createContext(null)\n\nexport const SVGContainer = ({ children, width, height }) => {\n    const svgRef = useRef(null)\n\tconst [svg, setSvg] = useState(null);\n\tuseEffect(() => setSvg(svgRef.current), [])\n    return (\n\t\t<svg\n\t\t\tref={svgRef}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t>\n\t\t\t<Context.Provider value={svg}>{children}</Context.Provider>\n\t\t</svg>\n\t);}\n\nexport function useSvg() {\n\treturn useContext(Context);\n}\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport {colors} from '../GlobalStyle'\n\nimport { geoMercator, geoPath, zoom, zoomIdentity, zoomTransform } from 'd3';\n\nconst projection = geoMercator().scale(6000).center([5.55, 52.2]);\nconst path = geoPath(projection);\n\nexport const DrawMap = ({ nld, penr }) => {\n\tconst { gemeente, province, provinceBorder } = nld;\n\tconst { byProvince, byCity, allPenR } = penr;\n\n\n\n\treturn (\n\t\t<g className='nld'>\n\t\t\t<g id='gemeentes'>\n\t\t\t\t{gemeente.features.map((d) => (\n\t\t\t\t\t<path key={d.id} className='gemeente-grens' d={path(d)} />\n\t\t\t\t))}\n\t\t\t</g>\n\t\t\t<g id='provinces'>\n\t\t\t\t{province.features.map((d) => (\n\t\t\t\t\t<path key={d.id} className='province' d={path(d)} />\n\t\t\t\t))}\n\t\t\t</g>\n\n\t\t\t<path id='province-borders' d={path(provinceBorder)} />\n\t\t\t{allPenR.map((d) => {\n\t\t\t\tconst [x, y] = projection([d.longitude, d.latitude]);\n\t\t\t\treturn <Circle key={d.id} cx={x} cy={y} r={d.capacity / 400} />;\n\t\t\t})}\n\t\t</g>\n\t);\n};\n\nconst Circle = styled.circle`\n\tfill: ${colors.midGray};\n\tfill-opacity: 0.5;\n\n\t&:hover {\n\t\tfill-opacity: 1;\n\t}\n`;\n","import { select, zoom } from 'd3';\nimport React, { useState, useEffect } from 'react'\n\nimport { useSvg } from './SVGContainer';\n\nexport const ZoomContainer = ({ children }) => {\n    const svgElement = useSvg()\n    const [{ x, y, k }, setTransform] = useState({ x: 0, y: 0, k: 1 })\n\n    const zoomed = (event) => setTransform(event.transform)\n\n    useEffect(() => {\n        if (!svgElement) return\n        const selection = select(svgElement)\n        const zoomMap = zoom().on('zoom', zoomed)\n        selection.call(zoomMap)\n        return () => selection.on(\".zoom\", null)\n    }, [svgElement])\n\n    return <g transform={`translate(${x}, ${y}) scale(${k})`}>{children}</g>\n}\n","import React, {useRef} from 'react';\n\nimport './App.css';\nimport GlobalStyle from './GlobalStyle';\nimport { useNLD } from './data/useNLD'\nimport { usePenR } from './data/usePenR';\n\nimport {SVGContainer} from './components/SVGContainer';\nimport { DrawMap } from './components/DrawMap'\n// import { MapNL } from './components/MapNL';\nimport {ZoomContainer} from './components/ZoomContainer'\n\n\n\nconst App = () => {\n  const nld = useNLD();\n  const penr = usePenR();\n\n  if (!nld || !penr) {\n  return <pre>Loading...</pre>\n}\n  return (\n\t\t<div className='App'>\n\t\t\t<SVGContainer width='100%' height='100%'>\n\t\t\t\t<ZoomContainer>\n\t\t\t\t\t<DrawMap nld={nld} penr={penr} />\n\t\t\t\t</ZoomContainer>\n\t\t\t</SVGContainer>\n\t\t  {/* <MapNL/> */}\n\t\t  <GlobalStyle />\n\t\t</div>\n  );\n}\n\nexport default App;\n\n","import { useState, useEffect } from 'react';\nimport { json } from 'd3';\nimport { feature, mesh } from 'topojson-client';\n\n    const jsonNLD =\n        'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/nl_2020.json';\n        \n\nexport const useNLD = () => {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        json(jsonNLD).then(topology => {\n            const { gemeente_2020, provincie_2020 } = topology.objects\n            setData({\n                gemeente: feature(topology, gemeente_2020),\n                province: feature(topology, provincie_2020),\n                provinceBorder: mesh(topology, provincie_2020, (a, b) => a !== b)\n            });\n        });\n    }, [])\n    console.log(data)\n    return data\n    }","import { useState, useEffect } from 'react';\nimport { csv, group } from 'd3';\n\n\nconst csvPenR =\n    'https://gist.githubusercontent.com/GiovanniDw/9ebe42d142f40e58e333e546a82f9b0d/raw/1f4e17c5e2a072e12ed5b2dce628413294a13c5e/OpenParkingPenR.csv';\n  \nconst row = d => {\n    d.latitude = +d.latitude;\n    d.longitude = +d.longitude;\n    return d\n}\n\n\nexport const usePenR = () => {\n    const [data, setData] = useState(null);\n    useEffect(() => {\n        csv(csvPenR).then(data => {\n            const byProvince = group(data, (d) => d.province);\n            const byCity = group(data, (d) => d.city);\n            setData({\n                byProvince: byProvince,\n                byCity: byCity,\n                allPenR: row(data)\n\n            })\n        })\n    }, []);\n    console.log(data)\n    return data\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}